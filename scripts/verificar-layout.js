#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const glob = require('glob');

console.log('üé® VERIFICANDO INTEGRIDADE DO LAYOUT E PADR√ïES PEDAG√ìGICOS...');

const args = process.argv.slice(2);
const atualizarHash = args.includes('--atualizar-hash');
const verificarPadroes = args.includes('--verificar-padroes');

const layoutFilesPath = 'layout-files.json';
const layoutIgnorePath = 'layout-ignore.json';
const hashesRefPath = 'logs/layout-hashes.json';
const logVerificacaoPath = 'logs/layout-verificacao.json';
const logVerificacaoMdPath = 'logs/layout-verificacao.md';
const logPadroesPath = 'logs/verificacao-padroes.json';

// Fun√ß√£o para calcular hash SHA-256
function calcularHash(arquivo) {
    try {
        const conteudo = fs.readFileSync(arquivo);
        return crypto.createHash('sha256').update(conteudo).digest('hex');
    } catch (error) {
        return null;
    }
}

// Fun√ß√£o para obter permiss√µes do arquivo
function getPermissoes(arquivo) {
    try {
        const stats = fs.statSync(arquivo);
        return (stats.mode & 0o777).toString(8);
    } catch (e) {
        return null;
    }
}

// Fun√ß√£o para obter tamanho do arquivo
function getTamanho(arquivo) {
    try {
        const stats = fs.statSync(arquivo);
        return stats.size;
    } catch (e) {
        return null;
    }
}

// Fun√ß√£o para carregar m√≥dulo da pasta public/data
function carregarModulo(numero) {
    try {
        const moduloPath = `public/data/module${numero}.js`;
        if (!fs.existsSync(moduloPath)) {
            return null;
        }
        
        const conteudo = fs.readFileSync(moduloPath, 'utf8');
        
        // Extrair o objeto do m√≥dulo usando regex
        const match = conteudo.match(/const module\d+ = (\{[\s\S]*?\});/);
        if (!match) {
            return null;
        }
        
        // Usar Function para parsing seguro
        return (new Function('return ' + match[1]))();
        
    } catch (error) {
        return null;
    }
}

// Fun√ß√£o para verificar padr√µes pedag√≥gicos e visuais
function verificarPadroesPedagogicos() {
    const padroes = {
        cards: {
            tipos: ['dica', 'atencao', 'exemplo', 'resumo', 'duvidas', 'default'],
            emojis: ['üí°', '‚ö†Ô∏è', 'üìù', 'üìä', 'üó®Ô∏è'],
            cores: ['#E6FFF5', '#FFF9E6', '#E6F0FF', '#F0F0F0', '#FFFFFF'],
            bordasArredondadas: '16px',
            sombra: '0 2px 8px #0001'
        },
        estrutura: {
            modulos: 7, // MRS tem 7 m√≥dulos (corrigido)
            quizzesPorModulo: 15, // 15 quest√µes por m√≥dulo (corrigido)
            avaliacaoFinal: 50,
            feedbacksObrigatorios: true,
            embaralhamentoObrigatorio: true,
            duvidasFrequentes: true,
            resumosVisuais: true
        },
        layout: {
            paletaCores: ['#2B2D3A', '#6C63FF', '#00E599', '#F5F6FA', '#22223B'],
            responsivo: true,
            cardsArredondados: true,
            barraSuperior: true,
            navegacaoModulos: true,
            barraProgresso: true
        },
        tipografia: {
            tituloCard: '1.4rem',
            subtituloCard: '1.1rem',
            textoPrincipal: '1.1rem',
            espacamentoCards: '24px'
        },
        acessibilidade: {
            contrasteMinimo: true,
            navegacaoTeclado: true,
            textosAlternativos: true,
            estruturaSemantica: true
        }
    };

    const problemas = [];
    const avisos = [];

    // Verificar estrutura de m√≥dulos (CORRIGIDO)
    try {
        let modulosEncontrados = 0;
        
        for (let i = 1; i <= padroes.estrutura.modulos; i++) {
            const modulo = carregarModulo(i);
            
            if (!modulo) {
                problemas.push(`M√≥dulo ${i} n√£o encontrado ou com erro`);
                continue;
            }
            
            modulosEncontrados++;
            
            // Verificar cards
            if (!modulo.cards || modulo.cards.length === 0) {
                problemas.push(`M√≥dulo ${i} sem cards`);
            }
            
            // Verificar tipos de cards
            const tiposCards = modulo.cards.map(card => card.tipo).filter(Boolean);
            const tiposUnicos = [...new Set(tiposCards)];
            
            if (tiposUnicos.length < 2) {
                avisos.push(`M√≥dulo ${i} com pouca variedade de tipos de cards: ${tiposUnicos.join(', ')}`);
            }
            
            // VERIFICA√á√ÉO ESPEC√çFICA: D√∫vidas Frequentes
            const cardsDuvidas = modulo.cards.filter(card => card.tipo === 'duvidas');
            if (cardsDuvidas.length === 0) {
                problemas.push(`M√≥dulo ${i} SEM CARD DE D√öVIDAS FREQUENTES (obrigat√≥rio)`);
            } else if (cardsDuvidas.length > 1) {
                avisos.push(`M√≥dulo ${i} com m√∫ltiplos cards de d√∫vidas frequentes: ${cardsDuvidas.length}`);
            } else {
                const cardDuvidas = cardsDuvidas[0];
                // Verificar estrutura do card de d√∫vidas frequentes
                if (!cardDuvidas.title || !cardDuvidas.title.includes('üó®Ô∏è')) {
                    problemas.push(`M√≥dulo ${i}: Card de d√∫vidas frequentes sem emoji üó®Ô∏è no t√≠tulo`);
                }
                if (!cardDuvidas.content || cardDuvidas.content.length < 100) {
                    avisos.push(`M√≥dulo ${i}: Card de d√∫vidas frequentes com conte√∫do muito curto`);
                }
                // Verificar se tem pelo menos uma d√∫vida e resposta
                if (!cardDuvidas.content.includes('‚ùì') || !cardDuvidas.content.includes('üí°')) {
                    avisos.push(`M√≥dulo ${i}: Card de d√∫vidas frequentes sem formato padr√£o (‚ùì d√∫vida / üí° resposta)`);
                }
            }
            
            // VERIFICA√á√ÉO ESPEC√çFICA: Resumos Visuais
            const cardsResumo = modulo.cards.filter(card => card.tipo === 'resumo' || card.tipo === 'resumo visual');
            if (cardsResumo.length === 0) {
                problemas.push(`M√≥dulo ${i} SEM CARD DE RESUMO VISUAL (obrigat√≥rio)`);
            } else if (cardsResumo.length > 1) {
                avisos.push(`M√≥dulo ${i} com m√∫ltiplos cards de resumo visual: ${cardsResumo.length}`);
            } else {
                const cardResumo = cardsResumo[0];
                // Verificar estrutura do card de resumo visual
                if (!cardResumo.title || !cardResumo.title.includes('üìä')) {
                    problemas.push(`M√≥dulo ${i}: Card de resumo visual sem emoji üìä no t√≠tulo`);
                }
                if (!cardResumo.content || cardResumo.content.length < 50) {
                    avisos.push(`M√≥dulo ${i}: Card de resumo visual com conte√∫do muito curto`);
                }
                // Verificar se tem elementos visuais (tabelas, listas, etc.)
                if (!cardResumo.content.includes('|') && !cardResumo.content.includes('‚Ä¢') && !cardResumo.content.includes('-')) {
                    avisos.push(`M√≥dulo ${i}: Card de resumo visual sem elementos visuais (tabelas, listas, etc.)`);
                }
            }
            
            // Verificar emojis apenas nos t√≠tulos (n√£o no meio do texto)
            modulo.cards.forEach((card, cardIndex) => {
                if (card.content && card.content.includes('üí°') && card.tipo !== 'dica') {
                    avisos.push(`M√≥dulo ${i}, card ${cardIndex + 1}: Emoji üí° encontrado no meio do texto (deve estar apenas no t√≠tulo)`);
                }
                if (card.content && card.content.includes('‚ö†Ô∏è') && card.tipo !== 'atencao') {
                    avisos.push(`M√≥dulo ${i}, card ${cardIndex + 1}: Emoji ‚ö†Ô∏è encontrado no meio do texto (deve estar apenas no t√≠tulo)`);
                }
                if (card.content && card.content.includes('üìù') && card.tipo !== 'exemplo') {
                    avisos.push(`M√≥dulo ${i}, card ${cardIndex + 1}: Emoji üìù encontrado no meio do texto (deve estar apenas no t√≠tulo)`);
                }
            });
            
            // Verificar quiz do m√≥dulo
            if (modulo.quiz && modulo.quiz.questoes) {
                if (modulo.quiz.questoes.length !== padroes.estrutura.quizzesPorModulo) {
                    problemas.push(`M√≥dulo ${i} com n√∫mero incorreto de quest√µes: ${modulo.quiz.questoes.length} (esperado: ${padroes.estrutura.quizzesPorModulo})`);
                }
                
                // Verificar feedbacks educativos
                modulo.quiz.questoes.forEach((questao, qIndex) => {
                    if (!questao.feedback || questao.feedback.includes('Correto!')) {
                        problemas.push(`Quest√£o ${qIndex + 1} do m√≥dulo ${i} sem feedback educativo adequado`);
                    }
                });
            } else {
                problemas.push(`M√≥dulo ${i} sem quiz ou quest√µes`);
            }
        }
        
        if (modulosEncontrados !== padroes.estrutura.modulos) {
            problemas.push(`N√∫mero de m√≥dulos incorreto: ${modulosEncontrados} (esperado: ${padroes.estrutura.modulos})`);
        }
        
    } catch (e) {
        problemas.push(`Erro ao verificar m√≥dulos: ${e.message}`);
    }

    // Verificar avalia√ß√£o final
    try {
        const avaliacaoPath = 'public/data/avaliacaoFinal.js';
        if (fs.existsSync(avaliacaoPath)) {
            const conteudo = fs.readFileSync(avaliacaoPath, 'utf8');
            const match = conteudo.match(/const avaliacaoFinal = (\{[\s\S]*?\});/);
            if (match) {
                const avaliacaoData = (new Function('return ' + match[1]))();
                if (avaliacaoData.questoes && avaliacaoData.questoes.length !== padroes.estrutura.avaliacaoFinal) {
                    problemas.push(`Avalia√ß√£o final com n√∫mero incorreto de quest√µes: ${avaliacaoData.questoes.length} (esperado: ${padroes.estrutura.avaliacaoFinal})`);
                }
            }
        } else {
            avisos.push('Avalia√ß√£o final n√£o encontrada em public/data/avaliacaoFinal.js');
        }
    } catch (e) {
        avisos.push(`N√£o foi poss√≠vel verificar avalia√ß√£o final: ${e.message}`);
    }

    // Verificar arquivos CSS para padr√µes visuais
    const arquivosCSS = glob.sync('public/**/*.css');
    arquivosCSS.forEach(cssFile => {
        try {
            const conteudo = fs.readFileSync(cssFile, 'utf8');
            
            // Verificar paleta de cores
            padroes.layout.paletaCores.forEach(cor => {
                if (!conteudo.includes(cor)) {
                    avisos.push(`Cor ${cor} n√£o encontrada em ${cssFile}`);
                }
            });
            
            // Verificar responsividade
            if (!conteudo.includes('@media') && !conteudo.includes('responsive')) {
                avisos.push(`Poss√≠vel falta de responsividade em ${cssFile}`);
            }
            
            // Verificar cards arredondados espec√≠ficos
            if (!conteudo.includes('border-radius: 16px') && !conteudo.includes('border-radius: 1rem')) {
                avisos.push(`Bordas arredondadas de 16px n√£o encontradas em ${cssFile}`);
            }
            
            // Verificar sombras suaves
            if (!conteudo.includes('box-shadow') && !conteudo.includes('shadow')) {
                avisos.push(`Sombras n√£o encontradas em ${cssFile}`);
            }
            
            // Verificar espa√ßamento entre cards
            if (!conteudo.includes('margin: 24px') && !conteudo.includes('margin: 1.5rem')) {
                avisos.push(`Espa√ßamento de 24px entre cards n√£o encontrado em ${cssFile}`);
            }
            
            // Verificar tipografia
            if (!conteudo.includes('font-size: 1.4rem') && !conteudo.includes('font-size: 1.1rem')) {
                avisos.push(`Tipografia padr√£o n√£o encontrada em ${cssFile}`);
            }
            
            // Verificar barra superior fixa
            if (!conteudo.includes('position: fixed') && !conteudo.includes('top: 0')) {
                avisos.push(`Barra superior fixa n√£o encontrada em ${cssFile}`);
            }
            
            // Verificar barra de progresso
            if (!conteudo.includes('progress') && !conteudo.includes('progresso')) {
                avisos.push(`Barra de progresso n√£o encontrada em ${cssFile}`);
            }
        } catch (e) {
            avisos.push(`Erro ao verificar ${cssFile}: ${e.message}`);
        }
    });

    // Verificar arquivos HTML para estrutura de cards e navega√ß√£o
    const arquivosHTML = glob.sync('public/**/*.html');
    arquivosHTML.forEach(htmlFile => {
        try {
            const conteudo = fs.readFileSync(htmlFile, 'utf8');
            
            // Verificar emojis apenas nos t√≠tulos (n√£o no meio do texto)
            const emojisTitulos = conteudo.match(/<h[1-6][^>]*>.*?[üí°‚ö†Ô∏èüìùüìäüó®Ô∏è].*?<\/h[1-6]>/g);
            if (emojisTitulos) {
                avisos.push(`Emojis encontrados em t√≠tulos de ${htmlFile}: ${emojisTitulos.length} ocorr√™ncias`);
            }
            
            // Verificar emojis no meio do texto (problema)
            const emojisMeioTexto = conteudo.match(/<p[^>]*>.*?[üí°‚ö†Ô∏èüìùüìäüó®Ô∏è].*?<\/p>/g);
            if (emojisMeioTexto) {
                problemas.push(`Emojis encontrados no meio do texto em ${htmlFile}: ${emojisMeioTexto.length} ocorr√™ncias (devem estar apenas nos t√≠tulos)`);
            }
            
            // Verificar estrutura de cards
            if (conteudo.includes('card') || conteudo.includes('Card')) {
                if (!conteudo.includes('border-radius') && !conteudo.includes('rounded')) {
                    avisos.push(`Cards detectados em ${htmlFile} mas possivelmente sem bordas arredondadas`);
                }
            }
            
            // Verificar navega√ß√£o entre m√≥dulos
            if (!conteudo.includes('navega√ß√£o') && !conteudo.includes('navigation') && !conteudo.includes('menu')) {
                avisos.push(`Navega√ß√£o entre m√≥dulos n√£o encontrada em ${htmlFile}`);
            }
            
            // Verificar barra de progresso
            if (!conteudo.includes('progress') && !conteudo.includes('progresso')) {
                avisos.push(`Barra de progresso n√£o encontrada em ${htmlFile}`);
            }
            
            // Verificar estrutura sem√¢ntica
            if (!conteudo.includes('<nav') && !conteudo.includes('<main') && !conteudo.includes('<section')) {
                avisos.push(`Estrutura sem√¢ntica HTML5 n√£o encontrada em ${htmlFile}`);
            }
            
            // Verificar acessibilidade - textos alternativos
            const imgsSemAlt = conteudo.match(/<img[^>]*((?<!alt=)[^>])*?>/g);
            if (imgsSemAlt) {
                problemas.push(`Imagens sem atributo alt encontradas em ${htmlFile}: ${imgsSemAlt.length}`);
            }
            
            // Verificar acessibilidade - navega√ß√£o por teclado
            if (!conteudo.includes('tabindex') && !conteudo.includes('onkeydown')) {
                avisos.push(`Navega√ß√£o por teclado n√£o implementada em ${htmlFile}`);
            }
        } catch (e) {
            avisos.push(`Erro ao verificar ${htmlFile}: ${e.message}`);
        }
    });

    return { problemas, avisos, padroes };
}

// Se n√£o existir layout-files.json, criar um exemplo m√≠nimo
if (!fs.existsSync(layoutFilesPath)) {
    const exemplo = [
        'public/**/*.css',
        'public/**/*.js',
        'public/**/*.html',
        'public/MRS/Audios/*.wav'
    ];
    fs.writeFileSync(layoutFilesPath, JSON.stringify(exemplo, null, 2), 'utf8');
    console.log(`‚ö†Ô∏è  Arquivo ${layoutFilesPath} criado automaticamente. Edite para incluir todos os padr√µes de arquivos de layout relevantes.`);
}

// Se n√£o existir layout-ignore.json, criar um exemplo m√≠nimo
if (!fs.existsSync(layoutIgnorePath)) {
    const exemplo = [
        'public/**/*.map',
        'public/**/*.bak',
        'public/**/*.backup',
        'public/data/**',
        'public/MRS/Audios/*.txt'
    ];
    fs.writeFileSync(layoutIgnorePath, JSON.stringify(exemplo, null, 2), 'utf8');
    console.log(`‚ö†Ô∏è  Arquivo ${layoutIgnorePath} criado automaticamente. Edite para incluir padr√µes a serem ignorados.`);
}

// Carregar lista de padr√µes de arquivos
let arquivosLayoutGlob = [];
try {
    arquivosLayoutGlob = JSON.parse(fs.readFileSync(layoutFilesPath, 'utf8'));
} catch (e) {
    console.error('‚ùå Erro ao ler layout-files.json:', e.message);
    process.exit(1);
}

// Carregar padr√µes a ignorar
let arquivosIgnoreGlob = [];
try {
    arquivosIgnoreGlob = JSON.parse(fs.readFileSync(layoutIgnorePath, 'utf8'));
} catch (e) {
    arquivosIgnoreGlob = [];
}

// Expandir padr√µes globais
let arquivosLayout = [];
let arquivosIgnorados = new Set();

arquivosLayoutGlob.forEach(padrao => {
    arquivosLayout = arquivosLayout.concat(glob.sync(padrao, { nodir: true }));
});
arquivosIgnoreGlob.forEach(padrao => {
    glob.sync(padrao, { nodir: true }).forEach(f => arquivosIgnorados.add(f));
});

// Remover duplicatas e ignorados
arquivosLayout = Array.from(new Set(arquivosLayout)).filter(f => !arquivosIgnorados.has(f));

// Buscar arquivos relevantes n√£o listados (novos arquivos)
function buscarArquivosRelevantes() {
    const todos = glob.sync('public/**/*.{css,js,html,woff,woff2,ttf,otf,png,jpg,jpeg,svg,wav,mp3}', { nodir: true });
    return todos.filter(f => !arquivosLayout.includes(f) && !arquivosIgnorados.has(f));
}

// Carregar hashes de refer√™ncia (se existirem)
let hashesReferencia = {};
let hashesCorrompido = false;
if (fs.existsSync(hashesRefPath)) {
    try {
        hashesReferencia = JSON.parse(fs.readFileSync(hashesRefPath, 'utf8'));
    } catch (e) {
        hashesReferencia = {};
        hashesCorrompido = true;
    }
}

let layoutOk = true;
const logDetalhado = [];
const novosHashes = {};
const arquivosDuplicados = {};
const nomesArquivos = {};

// Checar duplicidade de arquivos
arquivosLayout.forEach(arquivo => {
    const nome = path.basename(arquivo);
    if (!nomesArquivos[nome]) nomesArquivos[nome] = [];
    nomesArquivos[nome].push(arquivo);
});
Object.keys(nomesArquivos).forEach(nome => {
    if (nomesArquivos[nome].length > 1) arquivosDuplicados[nome] = nomesArquivos[nome];
});

arquivosLayout.forEach(arquivo => {
    if (fs.existsSync(arquivo)) {
        const hashAtual = calcularHash(arquivo);
        const permissoes = getPermissoes(arquivo);
        const tamanho = getTamanho(arquivo);
        novosHashes[arquivo] = hashAtual;
        if (atualizarHash) {
            logDetalhado.push({ arquivo, status: 'hash atualizado', hash: hashAtual, permissoes, tamanho });
        } else {
            if (hashesReferencia[arquivo] && hashAtual !== hashesReferencia[arquivo]) {
                layoutOk = false;
                logDetalhado.push({ arquivo, status: 'alterado', hashAtual, hashReferencia: hashesReferencia[arquivo], permissoes, tamanho });
            } else if (!hashesReferencia[arquivo]) {
                layoutOk = false;
                logDetalhado.push({ arquivo, status: 'sem hash de refer√™ncia', hashAtual, permissoes, tamanho });
            } else {
                logDetalhado.push({ arquivo, status: 'ok', hash: hashAtual, permissoes, tamanho });
            }
            // Checar tamanho muito diferente (>50% de diferen√ßa)
            if (hashesReferencia[arquivo] && hashesReferencia[arquivo + '_tamanho']) {
                const tamRef = hashesReferencia[arquivo + '_tamanho'];
                if (Math.abs(tamanho - tamRef) > tamRef * 0.5) {
                    layoutOk = false;
                    logDetalhado.push({ arquivo, status: 'tamanho muito diferente', tamanho, tamanhoReferencia: tamRef });
                }
            }
        }
    } else {
        layoutOk = false;
        logDetalhado.push({ arquivo, status: 'n√£o encontrado' });
    }
});

// Buscar arquivos novos n√£o listados
const arquivosNovos = buscarArquivosRelevantes();
if (arquivosNovos.length > 0) {
    layoutOk = false;
    arquivosNovos.forEach(f => logDetalhado.push({ arquivo: f, status: 'novo arquivo n√£o listado' }));
    console.log(`‚ö†Ô∏è  Arquivos relevantes n√£o listados detectados:`, arquivosNovos);
}

// Checar duplicidade
if (Object.keys(arquivosDuplicados).length > 0) {
    layoutOk = false;
    Object.keys(arquivosDuplicados).forEach(nome => {
        logDetalhado.push({ status: 'duplicidade', nome, arquivos: arquivosDuplicados[nome] });
        console.log(`‚ö†Ô∏è  Arquivos duplicados detectados: ${nome} -> ${arquivosDuplicados[nome].join(', ')}`);
    });
}

// Checar hashes corrompidos
if (hashesCorrompido) {
    layoutOk = false;
    logDetalhado.push({ status: 'hashes de refer√™ncia corrompidos' });
    console.log('‚ö†Ô∏è  Hashes de refer√™ncia corrompidos! Atualize-os com --atualizar-hash.');
}

// Validar refer√™ncias em HTML
function validarReferenciasHTML() {
    let problemas = 0;
    arquivosLayout.filter(f => f.endsWith('.html')).forEach(htmlFile => {
        try {
            const conteudo = fs.readFileSync(htmlFile, 'utf8');
            const refs = [];
            conteudo.replace(/<link[^>]+href=["']([^"']+)["']/g, (m, href) => refs.push(href));
            conteudo.replace(/<script[^>]+src=["']([^"']+)["']/g, (m, src) => refs.push(src));
            refs.forEach(ref => {
                let refPath = ref.replace(/^\//, 'public/');
                if (!fs.existsSync(refPath) && !fs.existsSync(path.join('public', ref))) {
                    layoutOk = false;
                    problemas++;
                    logDetalhado.push({ arquivo: htmlFile, status: 'refer√™ncia quebrada', referencia: ref });
                    console.log(`‚ö†Ô∏è  Refer√™ncia quebrada em ${htmlFile}: ${ref}`);
                }
            });
        } catch (e) {
            layoutOk = false;
            logDetalhado.push({ arquivo: htmlFile, status: 'erro leitura', erro: e.message });
        }
    });
    return problemas;
}
validarReferenciasHTML();

// Valida√ß√£o de acessibilidade
const arquivosHTML = arquivosLayout.filter(f => f.endsWith('.html'));
const problemasAcessibilidade = validarAcessibilidade(arquivosHTML);
if (problemasAcessibilidade.length > 0) {
    layoutOk = false;
    problemasAcessibilidade.forEach(p => logDetalhado.push({ status: 'acessibilidade', detalhe: p }));
    console.log('\n‚ôø Problemas de acessibilidade detectados:');
    problemasAcessibilidade.forEach(p => console.log('  - ' + p));
}

// Salvar log detalhado
try {
    if (!fs.existsSync('logs')) fs.mkdirSync('logs');
    fs.writeFileSync(logVerificacaoPath, JSON.stringify(logDetalhado, null, 2), 'utf8');
    
    // Verificar padr√µes pedag√≥gicos se solicitado
    let relatorioPadroes = null;
    if (verificarPadroes) {
        console.log('\nüìö VERIFICANDO PADR√ïES PEDAG√ìGICOS...');
        relatorioPadroes = verificarPadroesPedagogicos();
        
        // Salvar relat√≥rio de padr√µes
        fs.writeFileSync(logPadroesPath, JSON.stringify(relatorioPadroes, null, 2), 'utf8');
        
        // Exibir problemas e avisos
        if (relatorioPadroes.problemas.length > 0) {
            console.log('\n‚ùå PROBLEMAS PEDAG√ìGICOS DETECTADOS:');
            relatorioPadroes.problemas.forEach(problema => console.log(`  - ${problema}`));
            layoutOk = false;
        }
        
        if (relatorioPadroes.avisos.length > 0) {
            console.log('\n‚ö†Ô∏è  AVISOS PEDAG√ìGICOS:');
            relatorioPadroes.avisos.forEach(aviso => console.log(`  - ${aviso}`));
        }
        
        if (relatorioPadroes.problemas.length === 0 && relatorioPadroes.avisos.length === 0) {
            console.log('‚úÖ TODOS OS PADR√ïES PEDAG√ìGICOS ATENDIDOS!');
        }
    }
    
    // Gerar relat√≥rio em Markdown
    let md = '# Relat√≥rio de Verifica√ß√£o de Layout e Padr√µes Pedag√≥gicos\n\n';
    
    // Se√ß√£o de layout
    md += '## üîß Verifica√ß√£o de Layout\n\n';
    logDetalhado.forEach(item => {
        md += `- **${item.arquivo || item.nome}**: ${item.status}`;
        if (item.hash) md += ` | hash: \`${item.hash}\``;
        if (item.hashReferencia) md += ` | hash ref: \`${item.hashReferencia}\``;
        if (item.permissoes) md += ` | perm: \`${item.permissoes}\``;
        if (item.tamanho) md += ` | tam: ${item.tamanho}`;
        if (item.tamanhoReferencia) md += ` | tam ref: ${item.tamanhoReferencia}`;
        if (item.referencia) md += ` | refer√™ncia quebrada: ${item.referencia}`;
        if (item.arquivos) md += ` | arquivos: ${item.arquivos.join(', ')}`;
        if (item.erro) md += ` | erro: ${item.erro}`;
        md += '\n';
    });
    
    // Se√ß√£o de padr√µes pedag√≥gicos
    if (relatorioPadroes) {
        md += '\n## üìö Verifica√ß√£o de Padr√µes Pedag√≥gicos\n\n';
        
        if (relatorioPadroes.problemas.length > 0) {
            md += '### ‚ùå Problemas Detectados\n\n';
            relatorioPadroes.problemas.forEach(problema => {
                md += `- ${problema}\n`;
            });
            md += '\n';
        }
        
        if (relatorioPadroes.avisos.length > 0) {
            md += '### ‚ö†Ô∏è Avisos\n\n';
            relatorioPadroes.avisos.forEach(aviso => {
                md += `- ${aviso}\n`;
            });
            md += '\n';
        }
        
        if (relatorioPadroes.problemas.length === 0 && relatorioPadroes.avisos.length === 0) {
            md += '### ‚úÖ Todos os Padr√µes Atendidos\n\n';
            md += 'O curso est√° em conformidade com todos os padr√µes pedag√≥gicos e visuais definidos.\n\n';
        }
        
        // Resumo dos padr√µes verificados
        md += '### üìã Padr√µes Verificados\n\n';
        md += `- **M√≥dulos**: ${relatorioPadroes.padroes.estrutura.modulos}\n`;
        md += `- **Quest√µes por m√≥dulo**: ${relatorioPadroes.padroes.estrutura.quizzesPorModulo}\n`;
        md += `- **Avalia√ß√£o final**: ${relatorioPadroes.padroes.estrutura.avaliacaoFinal} quest√µes\n`;
        md += `- **Feedbacks educativos**: ${relatorioPadroes.padroes.estrutura.feedbacksObrigatorios ? 'Obrigat√≥rios' : 'Opcionais'}\n`;
        md += `- **Embaralhamento**: ${relatorioPadroes.padroes.estrutura.embaralhamentoObrigatorio ? 'Obrigat√≥rio' : 'Opcional'}\n`;
        md += `- **Tipos de cards**: ${relatorioPadroes.padroes.cards.tipos.join(', ')}\n`;
        md += `- **Layout responsivo**: ${relatorioPadroes.padroes.layout.responsivo ? 'Sim' : 'N√£o'}\n`;
    }
    
    fs.writeFileSync(logVerificacaoMdPath, md, 'utf8');
    console.log(`üìù Relat√≥rio detalhado salvo em ${logVerificacaoMdPath}`);
    if (relatorioPadroes) {
        console.log(`üìö Relat√≥rio de padr√µes pedag√≥gicos salvo em ${logPadroesPath}`);
    }
} catch (e) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel salvar o log detalhado:', e.message);
}

if (atualizarHash) {
    try {
        // Salvar hashes e tamanhos de refer√™ncia
        Object.keys(novosHashes).forEach(f => {
            novosHashes[f + '_tamanho'] = getTamanho(f);
        });
        fs.writeFileSync(hashesRefPath, JSON.stringify(novosHashes, null, 2), 'utf8');
        console.log(`‚úÖ Hashes de refer√™ncia atualizados em ${hashesRefPath}`);
        process.exit(0);
    } catch (e) {
        console.log('‚ùå Erro ao salvar hashes de refer√™ncia:', e.message);
        process.exit(1);
    }
}

// [RESUMO FINAL AMIG√ÅVEL]
let totalProblemas = logDetalhado.filter(i => ['alterado','n√£o encontrado','duplicidade','refer√™ncia quebrada','acessibilidade','hashes de refer√™ncia corrompidos','tamanho muito diferente','sem hash de refer√™ncia'].includes(i.status)).length;
let totalAvisos = logDetalhado.filter(i => i.status === 'aviso').length;

console.log('\n' + '='.repeat(50));
if (totalProblemas === 0 && totalAvisos === 0 && layoutOk) {
    console.log('‚úÖ‚úÖ LAYOUT E PADR√ïES 100% OK! Nenhum problema encontrado.');
    process.exit(0);
} else {
    if (totalProblemas > 0) {
        console.log(`‚ùå Foram encontrados ${totalProblemas} problemas cr√≠ticos no layout/padr√µes.`);
    }
    if (totalAvisos > 0) {
        console.log(`‚ö†Ô∏è Foram encontrados ${totalAvisos} avisos.`);
    }
    // Sugest√µes de corre√ß√£o
    const sugestoes = sugerirCorrecaoProblemas(logDetalhado);
    if (sugestoes.length > 0) {
        console.log('\nSugest√µes de corre√ß√£o autom√°tica:');
        sugestoes.forEach(s => console.log('  - ' + s));
    }
    if (totalProblemas > 0) {
        process.exit(1);
    } else {
        process.exit(2);
    }
}

// Adicionar se√ß√£o de ajuda
if (args.includes('--help') || args.includes('-h')) {
    console.log('\nüìñ AJUDA - VERIFICADOR DE LAYOUT E PADR√ïES PEDAG√ìGICOS');
    console.log('='.repeat(60));
    console.log('\nUso: node scripts/verificar-layout.js [op√ß√µes]');
    console.log('\nOp√ß√µes:');
    console.log('  --atualizar-hash     Atualiza os hashes de refer√™ncia');
    console.log('  --verificar-padroes  Verifica padr√µes pedag√≥gicos e visuais');
    console.log('  --help, -h          Mostra esta ajuda');
    console.log('\nExemplos:');
    console.log('  node scripts/verificar-layout.js                    # Verifica√ß√£o b√°sica');
    console.log('  node scripts/verificar-layout.js --atualizar-hash   # Atualizar hashes');
    console.log('  node scripts/verificar-layout.js --verificar-padroes # Verificar padr√µes');
    console.log('  node scripts/verificar-layout.js --atualizar-hash --verificar-padroes');
    console.log('\nüìö PADR√ïES PEDAG√ìGICOS VERIFICADOS:');
    console.log('  ‚úÖ 7 m√≥dulos do curso MRS');
    console.log('  ‚úÖ 15 quest√µes por m√≥dulo');
    console.log('  ‚úÖ 50 quest√µes na avalia√ß√£o final');
    console.log('  ‚úÖ Feedbacks educativos obrigat√≥rios');
    console.log('  ‚úÖ Embaralhamento de alternativas');
    console.log('  ‚úÖ Cards de d√∫vidas frequentes OBRIGAT√ìRIOS');
    console.log('  ‚úÖ Cards de resumo visual OBRIGAT√ìRIOS');
    console.log('  ‚úÖ Emojis apenas nos t√≠tulos (n√£o no meio do texto)');
    console.log('\nüîç VERIFICA√á√ïES ESPEC√çFICAS IMPLEMENTADAS:');
    console.log('  üó®Ô∏è D√∫vidas Frequentes:');
    console.log('    - Presen√ßa obrigat√≥ria em cada m√≥dulo');
    console.log('    - Emoji üó®Ô∏è no t√≠tulo');
    console.log('    - Formato padr√£o (‚ùì d√∫vida / üí° resposta)');
    console.log('    - Conte√∫do m√≠nimo de 100 caracteres');
    console.log('  üìä Resumos Visuais:');
    console.log('    - Presen√ßa obrigat√≥ria em cada m√≥dulo');
    console.log('    - Emoji üìä no t√≠tulo');
    console.log('    - Elementos visuais (tabelas, listas, etc.)');
    console.log('    - Conte√∫do m√≠nimo de 50 caracteres');
    console.log('\nüé® PADR√ïES VISUAIS VERIFICADOS:');
    console.log('  ‚úÖ Paleta de cores definida (#2B2D3A, #6C63FF, #00E599, etc.)');
    console.log('  ‚úÖ Layout responsivo');
    console.log('  ‚úÖ Cards com bordas arredondadas (16px)');
    console.log('  ‚úÖ Sombras suaves nos cards');
    console.log('  ‚úÖ Espa√ßamento adequado entre cards (24px)');
    console.log('  ‚úÖ Tipografia padr√£o (1.4rem t√≠tulos, 1.1rem texto)');
    console.log('  ‚úÖ Barra superior fixa');
    console.log('  ‚úÖ Navega√ß√£o entre m√≥dulos');
    console.log('  ‚úÖ Barra de progresso');
    console.log('\n‚ôø PADR√ïES DE ACESSIBILIDADE VERIFICADOS:');
    console.log('  ‚úÖ Imagens com atributo alt');
    console.log('  ‚úÖ Estrutura sem√¢ntica HTML5');
    console.log('  ‚úÖ Navega√ß√£o por teclado');
    console.log('  ‚úÖ Contraste m√≠nimo de cores');
    console.log('\nüîß TIPOS DE CARDS VERIFICADOS:');
    console.log('  üí° Dica (fundo verde claro)');
    console.log('  ‚ö†Ô∏è Aten√ß√£o (fundo amarelo claro)');
    console.log('  üìù Exemplo (fundo azul claro)');
    console.log('  üìä Resumo Visual (fundo cinza claro) - OBRIGAT√ìRIO');
    console.log('  üó®Ô∏è D√∫vidas Frequentes - OBRIGAT√ìRIO');
    console.log('  üìö Conte√∫do Principal (fundo branco)');
    console.log('\nüìÑ ARQUIVOS GERADOS:');
    console.log('  üìÑ logs/layout-verificacao.json    # Log detalhado em JSON');
    console.log('  üìÑ logs/layout-verificacao.md      # Relat√≥rio em Markdown');
    console.log('  üìÑ logs/verificacao-padroes.json   # Relat√≥rio de padr√µes (se --verificar-padroes)');
    console.log('  üìÑ logs/layout-hashes.json         # Hashes de refer√™ncia');
    console.log('\nüö® C√ìDIGOS DE SA√çDA:');
    console.log('  0 = Tudo OK (layout e padr√µes corretos)');
    console.log('  1 = Problemas cr√≠ticos detectados');
    console.log('  2 = Apenas avisos (sem problemas cr√≠ticos)');
    console.log('\nüí° SUGEST√ïES DE CORRE√á√ÉO:');
    console.log('  - O script sugere corre√ß√µes autom√°ticas para problemas simples');
    console.log('  - Arquivos duplicados: remover ou renomear');
    console.log('  - Arquivos novos: adicionar ao layout-files.json ou remover');
    console.log('  - Refer√™ncias quebradas: corrigir caminhos no HTML');
    console.log('  - Emojis no meio do texto: mover para t√≠tulos dos cards');
    console.log('  - Cards obrigat√≥rios faltando: criar cards de d√∫vidas e resumos');
    console.log('\nPara mais informa√ß√µes, consulte definicao_curso_pnsb.md');
    process.exit(0);
}

// [ADICIONAR] Fun√ß√£o para sugerir corre√ß√µes autom√°ticas
function sugerirCorrecaoProblemas(logDetalhado) {
    const sugestoes = [];
    logDetalhado.forEach(item => {
        if (item.status === 'duplicidade' && item.arquivos) {
            sugestoes.push(`Arquivos duplicados: ${item.nome}\n  Sugest√£o: Remova ou renomeie um dos arquivos: ${item.arquivos.join(', ')}`);
        }
        if (item.status === 'novo arquivo n√£o listado') {
            sugestoes.push(`Arquivo novo n√£o listado: ${item.arquivo}\n  Sugest√£o: Adicione ao layout-files.json se for relevante, ou remova se for desnecess√°rio.`);
        }
        if (item.status === 'refer√™ncia quebrada') {
            sugestoes.push(`Refer√™ncia quebrada em ${item.arquivo}: ${item.referencia}\n  Sugest√£o: Corrija o caminho ou remova a refer√™ncia do HTML.`);
        }
    });
    return sugestoes;
}

// [ADICIONAR] Fun√ß√£o de valida√ß√£o de acessibilidade b√°sica
function validarAcessibilidade(arquivosHTML) {
    const problemas = [];
    arquivosHTML.forEach(htmlFile => {
        try {
            const conteudo = fs.readFileSync(htmlFile, 'utf8');
            // Imagens sem alt
            const imgsSemAlt = [...conteudo.matchAll(/<img [^>]*((?<!alt=)[^>])*?>/g)];
            if (imgsSemAlt.length > 0) {
                problemas.push(`Imagens sem atributo alt em ${htmlFile}: ${imgsSemAlt.length}`);
            }
            // Bot√µes sem texto
            const botoesSemTexto = [...conteudo.matchAll(/<button[^>]*>\s*<\/button>/g)];
            if (botoesSemTexto.length > 0) {
                problemas.push(`Bot√µes sem texto em ${htmlFile}: ${botoesSemTexto.length}`);
            }
        } catch (e) {
            problemas.push(`Erro ao validar acessibilidade em ${htmlFile}: ${e.message}`);
        }
    });
    return problemas;
} 