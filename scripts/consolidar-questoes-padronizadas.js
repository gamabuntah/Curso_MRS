const fs = require('fs');
const path = require('path');

// Fun√ß√£o para ler arquivo de forma s√≠ncrona
function readFileSync(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        console.error(`Erro ao ler arquivo ${filePath}:`, error.message);
        return null;
    }
}

// Fun√ß√£o para escrever arquivo
function writeFileSync(filePath, content) {
    try {
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ Arquivo criado com sucesso: ${filePath}`);
    } catch (error) {
        console.error(`‚ùå Erro ao escrever arquivo ${filePath}:`, error.message);
    }
}

// Fun√ß√£o para contar quest√µes no conte√∫do
function contarQuestoes(conteudo) {
    // Padr√µes para detectar quest√µes
    const padrao1 = /## Quest√£o \d+/g;  // ## Quest√£o X
    const padrao2 = /Quest√£o \d+:/g;    // Quest√£o X:
    
    const matches1 = conteudo.match(padrao1) || [];
    const matches2 = conteudo.match(padrao2) || [];
    
    return matches1.length + matches2.length;
}

// Fun√ß√£o para padronizar o formato das quest√µes
function padronizarFormatoQuestoes(conteudo) {
    // Converter "Quest√£o X:" para "## Quest√£o X"
    let conteudoPadronizado = conteudo.replace(/Quest√£o (\d+):/g, '## Quest√£o $1');
    
    // Adicionar quebras de linha ap√≥s os t√≠tulos das quest√µes se n√£o existirem
    conteudoPadronizado = conteudoPadronizado.replace(/(## Quest√£o \d+)(?!\n)/g, '$1\n');
    
    return conteudoPadronizado;
}

// Fun√ß√£o principal para consolidar as quest√µes
function consolidarQuestoesPadronizadas() {
    console.log('üöÄ Iniciando consolida√ß√£o das quest√µes padronizadas...\n');

    // Lista dos arquivos de quest√µes padronizadas
    const arquivos = [
        'MRS/Questoes_Av_Final_Padronizadas_1-5.md',
        'MRS/Questoes_Av_Final_Padronizadas_6-10.md',
        'MRS/Questoes_Av_Final_Padronizadas_11-15.md',
        'MRS/Questoes_Av_Final_Padronizadas_16-20.md',
        'MRS/Questoes_Av_Final_Padronizadas_21-25.md',
        'MRS/Questoes_Av_Final_Padronizadas_26-30.md',
        'MRS/Questoes_Av_Final_Padronizadas_31-35.md',
        'MRS/Questoes_Av_Final_Padronizadas_36-40.md',
        'MRS/Questoes_Av_Final_Padronizadas_41-50.md'
    ];

    let conteudoCompleto = '';
    let totalQuestoes = 0;
    let arquivosProcessados = 0;

    // Cabe√ßalho do arquivo consolidado
    conteudoCompleto += `# Quest√µes PNSB 2024 - Avalia√ß√£o Final - COMPLETO
## Todas as 50 Quest√µes Padronizadas

**Data de Consolida√ß√£o:** ${new Date().toLocaleDateString('pt-BR')}
**Total de Quest√µes:** 50
**Status:** ‚úÖ Todas as quest√µes padronizadas consolidadas

---

`;

    // Processar cada arquivo
    arquivos.forEach((arquivo, index) => {
        console.log(`üìñ Processando arquivo ${index + 1}/${arquivos.length}: ${arquivo}`);
        
        const conteudo = readFileSync(arquivo);
        if (conteudo) {
            // Remover cabe√ßalhos e rodap√©s dos arquivos individuais
            let conteudoProcessado = conteudo;
            
            // Remover cabe√ßalho do arquivo (primeiras linhas at√© o primeiro "---")
            const linhas = conteudoProcessado.split('\n');
            let inicioConteudo = 0;
            
            for (let i = 0; i < linhas.length; i++) {
                if (linhas[i].trim() === '---') {
                    inicioConteudo = i + 1;
                    break;
                }
            }
            
            // Remover rodap√© (√∫ltimas linhas com progresso)
            let fimConteudo = linhas.length;
            for (let i = linhas.length - 1; i >= 0; i--) {
                if (linhas[i].includes('Progresso:') || linhas[i].includes('Pr√≥ximo:') || linhas[i].includes('Status:') || linhas[i].includes('üìä Progresso:')) {
                    fimConteudo = i;
                    break;
                }
            }
            
            // Extrair apenas o conte√∫do das quest√µes
            let conteudoQuestoes = linhas.slice(inicioConteudo, fimConteudo).join('\n');
            
            // Padronizar o formato das quest√µes
            conteudoQuestoes = padronizarFormatoQuestoes(conteudoQuestoes);
            
            // Adicionar ao conte√∫do completo
            if (conteudoQuestoes.trim()) {
                conteudoCompleto += conteudoQuestoes + '\n\n';
                arquivosProcessados++;
                
                // Contar quest√µes no arquivo atual
                const questoesNoArquivo = contarQuestoes(conteudoQuestoes);
                totalQuestoes += questoesNoArquivo;
                console.log(`   ‚úÖ ${questoesNoArquivo} quest√µes extra√≠das e padronizadas`);
            }
        } else {
            console.log(`   ‚ùå Erro ao processar arquivo`);
        }
    });

    // Adicionar rodap√©
    conteudoCompleto += `---

## üìä RESUMO FINAL

### **Total de Quest√µes Consolidadas:** ${totalQuestoes}
### **Arquivos Processados:** ${arquivosProcessados}/${arquivos.length}

### **Distribui√ß√£o por M√≥dulos:**
- **M√≥dulo 1:** 7 quest√µes (1-7) - Fundamentos do Saneamento B√°sico e a PNSB
- **M√≥dulo 2:** 7 quest√µes (8-14) - Estrutura do Question√°rio da PNSB 2024
- **M√≥dulo 3:** 8 quest√µes (15-22) - Limpeza Urbana e Manejo de Res√≠duos S√≥lidos
- **M√≥dulo 4:** 7 quest√µes (23-29) - MRS em √Åreas Especiais e Coleta Seletiva
- **M√≥dulo 5:** 7 quest√µes (30-36) - Manejo de Res√≠duos S√≥lidos Especiais (ESP)
- **M√≥dulo 6:** 7 quest√µes (37-43) - Unidades de Destina√ß√£o/Disposi√ß√£o Final (DIS)
- **M√≥dulo 7:** 7 quest√µes (44-50) - Entidades de Catadores, Ve√≠culos e Educa√ß√£o Ambiental

### **Status:** ‚úÖ **CONSOLIDA√á√ÉO CONCLU√çDA COM SUCESSO!**

---
**Script executado em:** ${new Date().toLocaleString('pt-BR')}
**Arquivo gerado:** MRS/Questoes_Av_Final_Padronizadas_COMPLETO.md
`;

    // Salvar arquivo consolidado
    const arquivoDestino = 'MRS/Questoes_Av_Final_Padronizadas_COMPLETO.md';
    writeFileSync(arquivoDestino, conteudoCompleto);

    // Resumo final
    console.log('\nüéâ CONSOLIDA√á√ÉO CONCLU√çDA!');
    console.log(`üìä Total de quest√µes consolidadas: ${totalQuestoes}`);
    console.log(`üìÅ Arquivos processados: ${arquivosProcessados}/${arquivos.length}`);
    console.log(`üìÑ Arquivo gerado: ${arquivoDestino}`);
    console.log(`‚ú® Formato padronizado: Todas as quest√µes agora usam "## Quest√£o X"`);
    
    if (totalQuestoes === 50) {
        console.log('‚úÖ Todas as 50 quest√µes foram consolidadas com sucesso!');
    } else {
        console.log(`‚ö†Ô∏è  Aten√ß√£o: Esperadas 50 quest√µes, encontradas ${totalQuestoes}`);
    }
}

// Executar o script
if (require.main === module) {
    consolidarQuestoesPadronizadas();
}

module.exports = { consolidarQuestoesPadronizadas }; 