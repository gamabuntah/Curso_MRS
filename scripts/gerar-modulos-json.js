#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üìÑ GERANDO ARQUIVOS JSON DOS M√ìDULOS MRS...\n');

let geracaoOk = true;
const modulosGerados = [];

// Fun√ß√£o para gerar arquivo JSON de um m√≥dulo
function gerarArquivoModulo(moduloComCards) {
    try {
        const moduloJSON = {
            id: moduloComCards.id,
            titulo: moduloComCards.titulo,
            audio: moduloComCards.audio,
            cards: moduloComCards.cards,
            quiz: {
                questoes: [] // Ser√° preenchido pelo script de quest√µes
            },
            metadata: {
                secoes: moduloComCards.metadata.secoesEncontradas || 0,
                listas: moduloComCards.metadata.listasEncontradas || 0,
                exemplos: moduloComCards.metadata.exemplosEncontrados || 0,
                pontosCriticos: moduloComCards.metadata.pontosCriticosEncontrados || 0,
                cardsCriados: moduloComCards.cards.length,
                tiposCards: moduloComCards.cards.map(card => card.type),
                dataGeracao: new Date().toISOString()
            }
        };
        
        // Salvar arquivo
        const caminhoArquivo = `public/data/module${moduloComCards.id}.js`;
        const conteudoArquivo = `const module${moduloComCards.id} = ${JSON.stringify(moduloJSON, null, 2)};\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = module${moduloComCards.id};\n}`;
        
        fs.writeFileSync(caminhoArquivo, conteudoArquivo, 'utf8');
        console.log(`‚úÖ M√≥dulo ${moduloComCards.id} gerado: ${caminhoArquivo}`);
        
        return moduloJSON;
        
    } catch (error) {
        console.log(`‚ùå Erro ao gerar m√≥dulo ${moduloComCards.id}: ${error.message}`);
        return null;
    }
}

// Carregar m√≥dulos com cards
console.log('üìÇ Carregando m√≥dulos com cards:');
let modulosComCards = [];

try {
    const arquivoCards = path.join('logs', 'modulos-com-cards.json');
    
    if (fs.existsSync(arquivoCards)) {
        modulosComCards = JSON.parse(fs.readFileSync(arquivoCards, 'utf8'));
        console.log(`‚úÖ ${modulosComCards.length} m√≥dulos com cards carregados`);
    } else {
        console.log('‚ùå Arquivo de m√≥dulos com cards n√£o encontrado!');
        console.log('‚ÑπÔ∏è  Execute primeiro o script criar-cards-inteligentes.js');
        process.exit(1);
    }
} catch (error) {
    console.log(`‚ùå Erro ao carregar m√≥dulos com cards: ${error.message}`);
    process.exit(1);
}

// Verificar se a pasta data existe
console.log('\nüìÅ Verificando pasta public/data:');
const dataPath = path.join('public', 'data');

if (!fs.existsSync(dataPath)) {
    try {
        fs.mkdirSync(dataPath, { recursive: true });
        console.log('‚úÖ Pasta public/data criada');
    } catch (error) {
        console.log(`‚ùå Erro ao criar pasta public/data: ${error.message}`);
        geracaoOk = false;
    }
} else {
    console.log('‚úÖ Pasta public/data j√° existe');
}

// Gerar arquivos JSON para cada m√≥dulo
console.log('\nüìÑ Gerando arquivos JSON dos m√≥dulos:');
modulosComCards.forEach(modulo => {
    console.log(`\nüìÑ Processando M√≥dulo ${modulo.id}:`);
    
    const moduloJSON = gerarArquivoModulo(modulo);
    
    if (moduloJSON) {
        modulosGerados.push(moduloJSON);
        
        console.log(`   ‚úÖ T√≠tulo: ${moduloJSON.titulo}`);
        console.log(`   üéµ √Åudio: ${moduloJSON.audio}`);
        console.log(`   üé¥ Cards: ${moduloJSON.cards.length}`);
        console.log(`   üìä Se√ß√µes: ${moduloJSON.metadata.secoes}`);
        console.log(`   üìã Listas: ${moduloJSON.metadata.listas}`);
        console.log(`   üìù Exemplos: ${moduloJSON.metadata.exemplos}`);
        console.log(`   ‚ö†Ô∏è  Pontos cr√≠ticos: ${moduloJSON.metadata.pontosCriticos}`);
        
        // Verificar se o arquivo foi criado corretamente
        const caminhoArquivo = `public/data/module${modulo.id}.js`;
        if (fs.existsSync(caminhoArquivo)) {
            const stats = fs.statSync(caminhoArquivo);
            const tamanhoKB = Math.round(stats.size / 1024);
            console.log(`   üíæ Arquivo: ${tamanhoKB}KB`);
        } else {
            console.log(`   ‚ùå Arquivo n√£o foi criado!`);
            geracaoOk = false;
        }
        
    } else {
        console.log(`   ‚ùå Falha na gera√ß√£o do m√≥dulo ${modulo.id}`);
        geracaoOk = false;
    }
});

// Verificar se todos os m√≥dulos foram gerados
console.log('\nüìä RESUMO DA GERA√á√ÉO:');
console.log(`   üìÑ M√≥dulos gerados: ${modulosGerados.length}/7`);

if (modulosGerados.length === 7) {
    console.log('   ‚úÖ Todos os m√≥dulos gerados com sucesso');
} else {
    console.log(`   ‚ùå Faltam ${7 - modulosGerados.length} m√≥dulos`);
    geracaoOk = false;
}

// Verificar arquivos gerados
console.log('\nüîç Verificando arquivos gerados:');
const arquivosEsperados = [
    'public/data/module1.js',
    'public/data/module2.js',
    'public/data/module3.js',
    'public/data/module4.js',
    'public/data/module5.js',
    'public/data/module6.js',
    'public/data/module7.js'
];

arquivosEsperados.forEach(arquivo => {
    if (fs.existsSync(arquivo)) {
        const stats = fs.statSync(arquivo);
        const tamanhoKB = Math.round(stats.size / 1024);
        console.log(`   ‚úÖ ${arquivo} - ${tamanhoKB}KB`);
        
        // Verificar se o JSON √© v√°lido
        try {
            const conteudo = fs.readFileSync(arquivo, 'utf8');
            if (conteudo.includes('module.exports')) {
                console.log(`   ‚úÖ ${arquivo} - Estrutura v√°lida`);
            } else {
                console.log(`   ‚ö†Ô∏è  ${arquivo} - Estrutura pode estar incorreta`);
            }
        } catch (error) {
            console.log(`   ‚ùå ${arquivo} - Erro ao verificar estrutura`);
            geracaoOk = false;
        }
    } else {
        console.log(`   ‚ùå ${arquivo} - N√ÉO ENCONTRADO!`);
        geracaoOk = false;
    }
});

// Criar arquivo de √≠ndice dos m√≥dulos
console.log('\nüìã Criando arquivo de √≠ndice dos m√≥dulos:');
try {
    const indiceModulos = {
        curso: "Manejo de Res√≠duos S√≥lidos",
        sigla: "MRS",
        totalModulos: modulosGerados.length,
        modulos: modulosGerados.map(m => ({
            id: m.id,
            titulo: m.titulo,
            audio: m.audio,
            cards: m.cards.length,
            secoes: m.metadata.secoes
        })),
        dataGeracao: new Date().toISOString()
    };
    
    const arquivoIndice = path.join('public', 'data', 'indice-modulos.json');
    fs.writeFileSync(arquivoIndice, JSON.stringify(indiceModulos, null, 2), 'utf8');
    console.log('‚úÖ √çndice dos m√≥dulos criado: public/data/indice-modulos.json');
    
} catch (error) {
    console.log(`‚ùå Erro ao criar √≠ndice dos m√≥dulos: ${error.message}`);
    geracaoOk = false;
}

// Salvar resumo da gera√ß√£o
console.log('\nüíæ Salvando resumo da gera√ß√£o:');
try {
    const resumoGeracao = {
        data: new Date().toISOString(),
        totalModulos: modulosGerados.length,
        arquivosGerados: arquivosEsperados.filter(arquivo => fs.existsSync(arquivo)),
        modulos: modulosGerados.map(m => ({
            id: m.id,
            titulo: m.titulo,
            cards: m.cards.length,
            secoes: m.metadata.secoes,
            tamanhoArquivo: fs.existsSync(`public/data/module${m.id}.js`) ? 
                Math.round(fs.statSync(`public/data/module${m.id}.js`).size / 1024) : 0
        })),
        status: geracaoOk ? 'SUCESSO' : 'COM_ERROS'
    };
    
    fs.writeFileSync(path.join('logs', 'resumo-geracao-modulos.json'), JSON.stringify(resumoGeracao, null, 2), 'utf8');
    console.log('‚úÖ Resumo da gera√ß√£o salvo em logs/resumo-geracao-modulos.json');
    
} catch (error) {
    console.log(`‚ùå Erro ao salvar resumo da gera√ß√£o: ${error.message}`);
    geracaoOk = false;
}

// Verificar qualidade dos m√≥dulos gerados
console.log('\nüîç Verificando qualidade dos m√≥dulos:');
modulosGerados.forEach(modulo => {
    if (modulo.cards.length < 2) {
        console.log(`   ‚ö†Ô∏è  M√≥dulo ${modulo.id}: Apenas ${modulo.cards.length} cards`);
    }
    
    if (modulo.metadata.secoes === 0) {
        console.log(`   ‚ö†Ô∏è  M√≥dulo ${modulo.id}: Nenhuma se√ß√£o encontrada`);
    }
    
    if (!modulo.audio) {
        console.log(`   ‚ö†Ô∏è  M√≥dulo ${modulo.id}: √Åudio n√£o definido`);
    }
    
    const temResumo = modulo.cards.some(card => card.title.includes('Resumo'));
    const temConteudo = modulo.cards.some(card => card.title.includes('Conte√∫do'));
    
    if (!temResumo || !temConteudo) {
        console.log(`   ‚ö†Ô∏è  M√≥dulo ${modulo.id}: Faltam cards essenciais`);
        geracaoOk = false;
    }
});

// Resultado final
console.log('\n' + '='.repeat(50));

if (geracaoOk && modulosGerados.length === 7) {
    console.log('üéâ GERA√á√ÉO DE M√ìDULOS JSON CONCLU√çDA COM SUCESSO!');
    console.log('‚úÖ Todos os 7 m√≥dulos gerados');
    console.log('‚úÖ Arquivos JSON v√°lidos criados');
    console.log('‚úÖ Estrutura de m√≥dulos preservada');
    console.log('‚úÖ √çndice dos m√≥dulos criado');
    console.log('‚úÖ M√≥dulos prontos para gera√ß√£o de quest√µes');
    process.exit(0);
} else {
    console.log('‚ö†Ô∏è  GERA√á√ÉO CONCLU√çDA COM PROBLEMAS!');
    console.log('‚ö†Ô∏è  Verifique os erros acima antes de continuar.');
    process.exit(1);
} 