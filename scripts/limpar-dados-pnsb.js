#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üßπ LIMPANDO DADOS ANTIGOS DO PNSB...\n');

let limpezaOk = true;

// Fun√ß√£o para remover arquivo ou pasta com seguran√ßa
function removerComSeguranca(caminho, descricao) {
    try {
        if (fs.existsSync(caminho)) {
            const stats = fs.statSync(caminho);
            
            if (stats.isDirectory()) {
                fs.rmSync(caminho, { recursive: true, force: true });
                console.log(`üóëÔ∏è  Pasta removida: ${descricao}`);
            } else {
                fs.unlinkSync(caminho);
                console.log(`üóëÔ∏è  Arquivo removido: ${descricao}`);
            }
            return true;
        } else {
            console.log(`‚ÑπÔ∏è  ${descricao} - N√£o encontrado (j√° removido)`);
            return true;
        }
    } catch (error) {
        console.log(`‚ùå Erro ao remover ${descricao}: ${error.message}`);
        return false;
    }
}

// 1. Remover dados espec√≠ficos do PNSB
const dadosParaRemover = [
    {
        caminho: 'public/data/module1.js',
        descricao: 'M√≥dulo 1 PNSB'
    },
    {
        caminho: 'public/data/module2.js',
        descricao: 'M√≥dulo 2 PNSB'
    },
    {
        caminho: 'public/data/module3.js',
        descricao: 'M√≥dulo 3 PNSB'
    },
    {
        caminho: 'public/data/module4.js',
        descricao: 'M√≥dulo 4 PNSB'
    },
    {
        caminho: 'public/data/module5.js',
        descricao: 'M√≥dulo 5 PNSB'
    },
    {
        caminho: 'public/data/module6.js',
        descricao: 'M√≥dulo 6 PNSB'
    },
    {
        caminho: 'public/data/module7.js',
        descricao: 'M√≥dulo 7 PNSB'
    },
    {
        caminho: 'public/data/module8.js',
        descricao: 'M√≥dulo 8 PNSB'
    },
    {
        caminho: 'public/data/avaliacaoFinal.js',
        descricao: 'Avalia√ß√£o Final PNSB'
    }
];

console.log('üìÅ Removendo m√≥dulos e avalia√ß√£o do PNSB:');
dadosParaRemover.forEach(item => {
    if (!removerComSeguranca(item.caminho, item.descricao)) {
        limpezaOk = false;
    }
});

// 2. Remover pasta MAP (conte√∫do PNSB)
console.log('\nüìÇ Removendo pasta MAP (conte√∫do PNSB):');
if (!removerComSeguranca('public/MAP', 'Pasta MAP (conte√∫do PNSB)')) {
    limpezaOk = false;
}

// 3. Remover arquivos tempor√°rios se existirem
console.log('\nüóÇÔ∏è  Removendo arquivos tempor√°rios:');
const pastasTemporarias = ['scripts', 'public/data', 'public'];
const extensoesTemporarias = ['.tmp', '.bak', '.old', '.log'];
pastasTemporarias.forEach(pasta => {
    if (fs.existsSync(pasta)) {
        const arquivos = fs.readdirSync(pasta);
        arquivos.forEach(arquivo => {
            if (extensoesTemporarias.some(ext => arquivo.endsWith(ext))) {
                const caminho = path.join(pasta, arquivo);
                removerComSeguranca(caminho, `Arquivo tempor√°rio: ${arquivo}`);
            }
        });
    }
});

// 4. Verificar se a pasta data est√° limpa
console.log('\nüîç Verificando pasta data:');
if (fs.existsSync('public/data')) {
    const arquivosData = fs.readdirSync('public/data');
    const arquivosRestantes = arquivosData.filter(arquivo =>
        !arquivo.match(/^module\d+\.js$/) &&
        arquivo !== 'avaliacaoFinal.js' &&
        !extensoesTemporarias.some(ext => arquivo.endsWith(ext))
    );
    if (arquivosRestantes.length === 0) {
        console.log('‚úÖ Pasta data limpa - OK');
    } else {
        console.log(`‚ÑπÔ∏è  Arquivos restantes na pasta data (n√£o removidos): ${arquivosRestantes.join(', ')}`);
    }
} else {
    console.log('‚ÑπÔ∏è  Pasta data n√£o existe - ser√° criada durante a transforma√ß√£o');
}

// 5. Verificar se n√£o h√° refer√™ncias ao PNSB em arquivos de configura√ß√£o
console.log('\n‚öôÔ∏è  Verificando configura√ß√µes:');
if (fs.existsSync('config-sistema.json')) {
    try {
        const config = JSON.parse(fs.readFileSync('config-sistema.json', 'utf8'));
        
        if (config.curso && config.curso.sigla === 'PNSB') {
            console.log('‚ö†Ô∏è  Configura√ß√£o ainda aponta para PNSB - ser√° atualizada');
        } else {
            console.log('‚úÖ Configura√ß√£o n√£o aponta para PNSB - OK');
        }
    } catch (error) {
        console.log('‚ÑπÔ∏è  Configura√ß√£o n√£o pode ser lida - ser√° recriada');
    }
}

// 6. Criar backup da limpeza (opcional)
console.log('\nüíæ Criando registro da limpeza:');
const registroLimpeza = {
    data: new Date().toISOString(),
    arquivosRemovidos: dadosParaRemover.map(item => item.descricao),
    pastaMAPRemovida: true,
    status: limpezaOk ? 'SUCESSO' : 'COM_ERROS'
};

try {
    if (!fs.existsSync('logs')) {
        fs.mkdirSync('logs');
    }
    fs.writeFileSync('logs/limpeza-pnsb.json', JSON.stringify(registroLimpeza, null, 2));
    console.log('‚úÖ Registro de limpeza salvo em logs/limpeza-pnsb.json');
} catch (error) {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel salvar registro de limpeza');
}

// Resultado final
console.log('\n' + '='.repeat(50));

if (limpezaOk) {
    console.log('üéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
    console.log('‚úÖ Dados antigos do PNSB removidos.');
    console.log('‚úÖ Sistema pronto para transforma√ß√£o MRS.');
    process.exit(0);
} else {
    console.log('‚ö†Ô∏è  LIMPEZA CONCLU√çDA COM ALGUNS PROBLEMAS!');
    console.log('‚ö†Ô∏è  Verifique os erros acima antes de continuar.');
    process.exit(1);
} 