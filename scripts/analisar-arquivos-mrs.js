#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üìä ANALISANDO ARQUIVOS MRS...\n');

let arquivosOk = true;

// 1. Verificar arquivos .txt dos m√≥dulos
console.log('üìÅ Verificando arquivos .txt dos m√≥dulos:');
let modulosTxtOk = 0;
for (let i = 1; i <= 7; i++) {
    const arquivosModulo = fs.readdirSync('MRS').filter(f => f.match(new RegExp(`^M√≥dulo ${i} .+\.txt$`)));
    if (arquivosModulo.length > 0) {
        const arquivo = arquivosModulo[0];
        const caminho = path.join('MRS', arquivo);
        const stats = fs.statSync(caminho);
        const tamanhoKB = Math.round(stats.size / 1024);
        if (tamanhoKB >= 1) {
            console.log(`‚úÖ ${arquivo} - ${tamanhoKB}KB`);
            modulosTxtOk++;
        } else {
            console.log(`‚ùå ${arquivo} - Arquivo muito pequeno (${tamanhoKB}KB)`);
            arquivosOk = false;
        }
    } else {
        console.log(`‚ùå M√≥dulo ${i} (.txt) - N√ÉO ENCONTRADO!`);
        arquivosOk = false;
    }
}
if (modulosTxtOk === 7) {
    console.log('‚úÖ Todos os arquivos de texto dos m√≥dulos MRS encontrados!');
}

// 2. Verificar √°udios .wav
const audiosEsperados = [
    'Curso MRS - Mod 1.wav',
    'Curso MRS - Mod 2.wav',
    'Curso MRS - Mod 3.wav',
    'Curso MRS - Mod 4.wav',
    'Curso MRS - Mod 5.wav',
    'Curso MRS - Mod 6.wav',
    'Curso MRS - Mod 7.wav'
];

console.log('\nüéµ Verificando arquivos de √°udio:');
audiosEsperados.forEach(audio => {
    const caminho = path.join('MRS', 'Audios', audio);
    if (fs.existsSync(caminho)) {
        const stats = fs.statSync(caminho);
        const tamanhoMB = Math.round(stats.size / (1024 * 1024));
        
        if (tamanhoMB >= 10) { // M√≠nimo 10MB
            console.log(`‚úÖ ${audio} - ${tamanhoMB}MB`);
        } else {
            console.log(`‚ùå ${audio} - Arquivo muito pequeno (${tamanhoMB}MB)`);
            arquivosOk = false;
        }
    } else {
        console.log(`‚ùå ${audio} - N√ÉO ENCONTRADO!`);
        arquivosOk = false;
    }
});

// 3. Verificar estrutura de pastas
console.log('\nüìÇ Verificando estrutura de pastas:');
const pastasMRS = ['MRS', 'MRS/Audios'];
pastasMRS.forEach(pasta => {
    if (fs.existsSync(pasta)) {
        console.log(`‚úÖ ${pasta}/ - OK`);
    } else {
        console.log(`‚ùå ${pasta}/ - N√ÉO ENCONTRADA!`);
        arquivosOk = false;
    }
});

// 4. Verificar codifica√ß√£o dos arquivos .txt
console.log('\nüî§ Verificando codifica√ß√£o dos arquivos .txt:');
for (let i = 1; i <= 7; i++) {
    const arquivosModulo = fs.readdirSync('MRS').filter(f => f.match(new RegExp(`^M√≥dulo ${i} .+\.txt$`)));
    if (arquivosModulo.length > 0) {
        const arquivo = arquivosModulo[0];
        const caminho = path.join('MRS', arquivo);
        try {
            console.log(`[DEBUG] Antes de ler: ${arquivo}`);
            const conteudo = fs.readFileSync(caminho, 'utf8');
            console.log(`[DEBUG] Depois de ler: ${arquivo}`);
            const temAcentos = /[√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß]/i.test(conteudo);
            const temCaracteresEspeciais = /[^\u0000-\u007F]/.test(conteudo);
            if (temAcentos || temCaracteresEspeciais) {
                console.log(`‚úÖ ${arquivo} - Codifica√ß√£o UTF-8 OK`);
            } else {
                console.log(`‚ö†Ô∏è  ${arquivo} - Sem caracteres especiais (pode estar OK)`);
            }
            const linhas = conteudo.split('\n').filter(linha => linha.trim().length > 0);
            if (linhas.length >= 10) {
                console.log(`   üìù ${linhas.length} linhas de conte√∫do`);
            } else {
                console.log(`   ‚ùå ${arquivo} - Pouco conte√∫do (${linhas.length} linhas)`);
                arquivosOk = false;
            }
        } catch (error) {
            console.log(`‚ùå ${arquivo} - Erro ao ler arquivo: ${error.message}`);
            arquivosOk = false;
        }
    }
}

// 5. Verificar nomenclatura e padr√µes
console.log('\nüè∑Ô∏è  Verificando padr√µes de nomenclatura:');
const arquivosEncontrados = fs.readdirSync('MRS').filter(f => f.endsWith('.txt'));
const audiosEncontrados = fs.readdirSync('MRS/Audios').filter(f => f.endsWith('.wav'));

if (arquivosEncontrados.length === 7) {
    console.log('‚úÖ 7 arquivos .txt encontrados - OK');
} else {
    console.log(`‚ùå ${arquivosEncontrados.length} arquivos .txt encontrados (esperado: 7)`);
    arquivosOk = false;
}

if (audiosEncontrados.length === 7) {
    console.log('‚úÖ 7 arquivos .wav encontrados - OK');
} else {
    console.log(`‚ùå ${audiosEncontrados.length} arquivos .wav encontrados (esperado: 7)`);
    arquivosOk = false;
}

// 6. Verificar se h√° arquivos extras
const arquivosTxtEsperados = [
    'M√≥dulo 1 Introdu√ß√£o ao Saneamento B.txt',
    'M√≥dulo 2 Estrutura do Question√°rio.txt', 
    'M√≥dulo 3 Aspectos Legais, Terceiriz.txt',
    'M√≥dulo 4 MRS em √Åreas Especiais e C.txt',
    'M√≥dulo 5 Manejo de Res√≠duos S√≥lidos.txt',
    'M√≥dulo 6 Unidades de Destina√ß√£oDisp.txt',
    'M√≥dulo 7 Entidades de Catadores, Ve.txt'
];

const arquivosTxtExtras = arquivosEncontrados.filter(arquivo => 
    !arquivosTxtEsperados.includes(arquivo)
);

if (arquivosTxtExtras.length > 0) {
    console.log(`‚ö†Ô∏è  Arquivos .txt extras encontrados: ${arquivosTxtExtras.join(', ')}`);
}

const audiosExtras = audiosEncontrados.filter(audio => 
    !audiosEsperados.includes(audio)
);

if (audiosExtras.length > 0) {
    console.log(`‚ö†Ô∏è  Arquivos .wav extras encontrados: ${audiosExtras.join(', ')}`);
}

// Resultado final
console.log('\n' + '='.repeat(50));

if (arquivosOk) {
    console.log('üéâ ARQUIVOS MRS ANALISADOS - TUDO OK!');
    console.log('‚úÖ Todos os arquivos necess√°rios est√£o presentes.');
    console.log('‚úÖ Estrutura de pastas correta.');
    console.log('‚úÖ Arquivos com tamanho adequado.');
    process.exit(0);
} else {
    console.log('‚ùå PROBLEMAS ENCONTRADOS NOS ARQUIVOS MRS!');
    console.log('‚ö†Ô∏è  Corrija os problemas antes de continuar.');
    process.exit(1);
} 