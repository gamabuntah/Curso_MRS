#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üåê ADAPTANDO FRONTEND PARA MRS...\n');

let adaptacaoOk = true;

// Fun√ß√£o para fazer backup antes de modificar
function fazerBackup(arquivo, descricao) {
    try {
        if (fs.existsSync(arquivo)) {
            const backupPath = arquivo + '.backup';
            fs.copyFileSync(arquivo, backupPath);
            console.log(`üíæ Backup criado: ${descricao}`);
            return true;
        }
        return false;
    } catch (error) {
        console.log(`‚ùå Erro ao criar backup de ${descricao}: ${error.message}`);
        return false;
    }
}

// 1. Adaptar script.js
console.log('üìú Adaptando script.js:');
const scriptPath = path.join('public', 'script.js');

if (fs.existsSync(scriptPath)) {
    // Fazer backup
    fazerBackup(scriptPath, 'script.js');
    
    try {
        let conteudo = fs.readFileSync(scriptPath, 'utf8');
        
        // Alterar refer√™ncias de √°udio
        conteudo = conteudo.replace(/Curso MAP - Mod/g, 'Curso MRS - Mod');
        conteudo = conteudo.replace(/Curso PNSB - Mod/g, 'Curso MRS - Mod');
        
        // Alterar t√≠tulos e refer√™ncias gerais
        conteudo = conteudo.replace(/PNSB/g, 'MRS');
        conteudo = conteudo.replace(/Plano Nacional de Saneamento B√°sico/g, 'Manejo de Res√≠duos S√≥lidos');
        conteudo = conteudo.replace(/MAP/g, 'MRS');
        
        // Alterar porta do backend se necess√°rio
        conteudo = conteudo.replace(/localhost:3001/g, 'localhost:3002');
        conteudo = conteudo.replace(/127\.0\.0\.1:3001/g, '127.0.0.1:3002');
        
        // Salvar arquivo modificado
        fs.writeFileSync(scriptPath, conteudo, 'utf8');
        console.log('‚úÖ script.js adaptado para MRS');
        
        // Verificar se as altera√ß√µes foram aplicadas
        const conteudoVerificado = fs.readFileSync(scriptPath, 'utf8');
        if (conteudoVerificado.includes('MRS') && !conteudoVerificado.includes('PNSB')) {
            console.log('‚úÖ Verifica√ß√£o: refer√™ncias atualizadas para MRS');
        } else {
            console.log('‚ùå Verifica√ß√£o falhou: altera√ß√µes n√£o aplicadas corretamente');
            adaptacaoOk = false;
        }
        
    } catch (error) {
        console.log(`‚ùå Erro ao adaptar script.js: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚ùå script.js n√£o encontrado!');
    adaptacaoOk = false;
}

// 2. Adaptar index.html
console.log('\nüìÑ Adaptando index.html:');
const indexPath = path.join('public', 'index.html');

if (fs.existsSync(indexPath)) {
    // Fazer backup
    fazerBackup(indexPath, 'index.html');
    
    try {
        let conteudo = fs.readFileSync(indexPath, 'utf8');
        
        // Alterar t√≠tulo da p√°gina
        conteudo = conteudo.replace(/<title>.*?<\/title>/, '<title>Curso MRS - Manejo de Res√≠duos S√≥lidos</title>');
        
        // Alterar t√≠tulos no conte√∫do
        conteudo = conteudo.replace(/PNSB/g, 'MRS');
        conteudo = conteudo.replace(/Plano Nacional de Saneamento B√°sico/g, 'Manejo de Res√≠duos S√≥lidos');
        conteudo = conteudo.replace(/MAP/g, 'MRS');
        
        // Alterar descri√ß√µes
        conteudo = conteudo.replace(/Capacita√ß√£o em Manejo de √Åguas Pluviais/g, 'Capacita√ß√£o em Limpeza e Manejo de Res√≠duos S√≥lidos');
        
        // Salvar arquivo modificado
        fs.writeFileSync(indexPath, conteudo, 'utf8');
        console.log('‚úÖ index.html adaptado para MRS');
        
    } catch (error) {
        console.log(`‚ùå Erro ao adaptar index.html: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚ùå index.html n√£o encontrado!');
    adaptacaoOk = false;
}

// 3. Verificar se style.css est√° intacto
console.log('\nüé® Verificando style.css:');
const stylePath = path.join('public', 'style.css');

if (fs.existsSync(stylePath)) {
    try {
        const conteudo = fs.readFileSync(stylePath, 'utf8');
        
        // Verificar se as cores principais est√£o presentes
        const coresPrincipais = ['#2B2D3A', '#6C63FF', '#00E599', '#F5F6FA'];
        const coresEncontradas = coresPrincipais.filter(cor => conteudo.includes(cor));
        
        if (coresEncontradas.length >= 3) {
            console.log('‚úÖ style.css mantido intacto - cores preservadas');
        } else {
            console.log('‚ö†Ô∏è  style.css pode ter sido alterado - verificar cores');
        }
        
    } catch (error) {
        console.log(`‚ùå Erro ao verificar style.css: ${error.message}`);
    }
} else {
    console.log('‚ùå style.css n√£o encontrado!');
    adaptacaoOk = false;
}

// 4. Verificar certificate-manager.js
console.log('\nüèÜ Verificando certificate-manager.js:');
const certPath = path.join('public', 'certificate-manager.js');

if (fs.existsSync(certPath)) {
    try {
        let conteudo = fs.readFileSync(certPath, 'utf8');
        
        // Alterar refer√™ncias no certificado
        conteudo = conteudo.replace(/PNSB/g, 'MRS');
        conteudo = conteudo.replace(/Plano Nacional de Saneamento B√°sico/g, 'Manejo de Res√≠duos S√≥lidos');
        conteudo = conteudo.replace(/MAP/g, 'MRS');
        
        // Salvar arquivo modificado
        fs.writeFileSync(certPath, conteudo, 'utf8');
        console.log('‚úÖ certificate-manager.js adaptado para MRS');
        
    } catch (error) {
        console.log(`‚ùå Erro ao adaptar certificate-manager.js: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚ùå certificate-manager.js n√£o encontrado!');
    adaptacaoOk = false;
}

// 5. Criar pasta MRS no public se n√£o existir
console.log('\nüìÅ Verificando estrutura de pastas:');
const mrsPublicPath = path.join('public', 'MRS');

if (!fs.existsSync(mrsPublicPath)) {
    try {
        fs.mkdirSync(mrsPublicPath, { recursive: true });
        console.log('‚úÖ Pasta public/MRS criada');
    } catch (error) {
        console.log(`‚ùå Erro ao criar pasta public/MRS: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚úÖ Pasta public/MRS j√° existe');
}

// 6. Criar pasta Audios dentro de MRS
const audiosPath = path.join(mrsPublicPath, 'Audios');
if (!fs.existsSync(audiosPath)) {
    try {
        fs.mkdirSync(audiosPath, { recursive: true });
        console.log('‚úÖ Pasta public/MRS/Audios criada');
    } catch (error) {
        console.log(`‚ùå Erro ao criar pasta public/MRS/Audios: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚úÖ Pasta public/MRS/Audios j√° existe');
}

// 7. Verificar se a pasta data existe
const dataPath = path.join('public', 'data');
if (!fs.existsSync(dataPath)) {
    try {
        fs.mkdirSync(dataPath, { recursive: true });
        console.log('‚úÖ Pasta public/data criada');
    } catch (error) {
        console.log(`‚ùå Erro ao criar pasta public/data: ${error.message}`);
        adaptacaoOk = false;
    }
} else {
    console.log('‚úÖ Pasta public/data j√° existe');
}

// Resultado final
console.log('\n' + '='.repeat(50));

if (adaptacaoOk) {
    console.log('üéâ FRONTEND ADAPTADO COM SUCESSO!');
    console.log('‚úÖ 7 m√≥dulos configurados');
    console.log('‚úÖ T√≠tulos atualizados para MRS');
    console.log('‚úÖ Refer√™ncias de √°udio corrigidas');
    console.log('‚úÖ Estrutura de pastas criada');
    console.log('‚úÖ Certificados adaptados');
    process.exit(0);
} else {
    console.log('‚ö†Ô∏è  ADAPTA√á√ÉO CONCLU√çDA COM ALGUNS PROBLEMAS!');
    console.log('‚ö†Ô∏è  Verifique os erros acima antes de continuar.');
    process.exit(1);
} 