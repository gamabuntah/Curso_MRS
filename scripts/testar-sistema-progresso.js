/**
 * Teste Espec√≠fico do Sistema de Progresso MRS
 * Verifica se todas as funcionalidades do progresso est√£o funcionando
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ TESTANDO SISTEMA DE PROGRESSO MRS...\n');

// Fun√ß√£o para simular o localStorage
global.localStorage = {
    data: {},
    getItem(key) {
        return this.data[key] || null;
    },
    setItem(key, value) {
        this.data[key] = value;
    },
    removeItem(key) {
        delete this.data[key];
    },
    clear() {
        this.data = {};
    }
};

// Fun√ß√£o para simular fetch
global.fetch = async (url, options = {}) => {
    // Simula um backend que sempre responde com sucesso
    if (options.method === 'POST') {
        return {
            ok: true,
            status: 200,
            json: async () => ({ success: true })
        };
    } else {
        // GET request - retorna progresso vazio para novo usu√°rio
        return {
            ok: false,
            status: 404
        };
    }
};

// Fun√ß√£o para simular document
global.document = {
    body: {
        appendChild: () => {},
        removeChild: () => {}
    },
    querySelector: () => null,
    dispatchEvent: () => {}
};

// Carrega o ProgressManager
const progressManagerPath = path.join(__dirname, '../public/progress-manager.js');
let progressManagerCode = fs.readFileSync(progressManagerPath, 'utf8');

// Remove a declara√ß√£o de classe e exporta para teste
progressManagerCode = progressManagerCode.replace('class ProgressManager {', 'class ProgressManager {');
progressManagerCode += '\nmodule.exports = ProgressManager;';

// Executa o c√≥digo do ProgressManager
eval(progressManagerCode);

const ProgressManager = module.exports;

async function testarSistemaProgresso() {
    const resultados = {
        testes: [],
        erros: [],
        sucessos: 0,
        total: 0
    };

    function adicionarTeste(nome, resultado, erro = null) {
        resultados.total++;
        if (resultado) {
            resultados.sucessos++;
            console.log(`‚úÖ ${nome}`);
        } else {
            resultados.erros.push({ nome, erro });
            console.log(`‚ùå ${nome}${erro ? ` - ${erro}` : ''}`);
        }
        resultados.testes.push({ nome, resultado });
    }

    try {
        // Teste 1: Cria√ß√£o do ProgressManager
        console.log('1. Testando cria√ß√£o do ProgressManager...');
        const pm = new ProgressManager('teste_usuario', 'user');
        adicionarTeste('Cria√ß√£o do ProgressManager', pm && pm.username === 'teste_usuario');

        // Teste 2: Inicializa√ß√£o
        console.log('\n2. Testando inicializa√ß√£o...');
        await pm.init();
        adicionarTeste('Inicializa√ß√£o do ProgressManager', pm.progress && pm.progress.modules);

        // Teste 3: Estrutura inicial
        console.log('\n3. Testando estrutura inicial...');
        const temModulo1 = pm.progress.modules['1'] && pm.progress.modules['1'].status === 'available';
        const temModulo2 = pm.progress.modules['2'] && pm.progress.modules['2'].status === 'locked';
        adicionarTeste('M√≥dulo 1 dispon√≠vel inicialmente', temModulo1);
        adicionarTeste('M√≥dulo 2 bloqueado inicialmente', temModulo2);

        // Teste 4: Conclus√£o de quiz
        console.log('\n4. Testando conclus√£o de quiz...');
        await pm.completeQuiz('1', 85);
        const statusModulo1 = pm.getModuleStatus('1');
        adicionarTeste('Quiz aprovado (85%) - status correto', statusModulo1 === 'available');

        // Teste 5: Conclus√£o de √°udio
        console.log('\n5. Testando conclus√£o de √°udio...');
        await pm.markAudioAsCompleted('1');
        const statusFinalModulo1 = pm.getModuleStatus('1');
        adicionarTeste('√Åudio conclu√≠do - m√≥dulo completo', statusFinalModulo1 === 'completed');

        // Teste 6: Desbloqueio do pr√≥ximo m√≥dulo
        console.log('\n6. Testando desbloqueio sequencial...');
        const modulo2Status = pm.getModuleStatus('2');
        adicionarTeste('M√≥dulo 2 desbloqueado ap√≥s conclus√£o do 1', modulo2Status === 'available');

        // Teste 7: Quiz reprovado
        console.log('\n7. Testando quiz reprovado...');
        await pm.completeQuiz('2', 60);
        const statusModulo2Reprovado = pm.getModuleStatus('2');
        adicionarTeste('Quiz reprovado (60%) - status failed', statusModulo2Reprovado === 'failed');

        // Teste 8: Progresso geral
        console.log('\n8. Testando c√°lculo de progresso...');
        const progressoGeral = pm.getOverallProgress();
        adicionarTeste('Progresso geral calculado corretamente', progressoGeral === 12.5); // 1/8 = 12.5%

        // Teste 9: Acesso √† avalia√ß√£o final
        console.log('\n9. Testando acesso √† avalia√ß√£o final...');
        const podeAcessarFinal = pm.canAccessFinalEvaluation();
        adicionarTeste('Avalia√ß√£o final bloqueada (apenas 1 m√≥dulo completo)', !podeAcessarFinal);

        // Teste 10: Conclus√£o de mais m√≥dulos
        console.log('\n10. Testando conclus√£o de m√∫ltiplos m√≥dulos...');
        for (let i = 2; i <= 6; i++) {
            await pm.completeQuiz(i.toString(), 85);
            await pm.markAudioAsCompleted(i.toString());
        }
        const podeAcessarFinalAgora = pm.canAccessFinalEvaluation();
        adicionarTeste('Avalia√ß√£o final desbloqueada (6 m√≥dulos completos)', podeAcessarFinalAgora);

        // Teste 11: Avalia√ß√£o final
        console.log('\n11. Testando avalia√ß√£o final...');
        await pm.completeFinalEvaluation(75);
        const statusFinal = pm.progress.final_evaluation.status;
        adicionarTeste('Avalia√ß√£o final aprovada', statusFinal === 'passed');

        // Teste 12: Certificado
        console.log('\n12. Testando gera√ß√£o de certificado...');
        const certificadoEmitido = pm.progress.certificate.issued;
        adicionarTeste('Certificado emitido ap√≥s aprova√ß√£o na final', certificadoEmitido);

        // Teste 13: Cache local
        console.log('\n13. Testando cache local...');
        const dadosLocais = localStorage.getItem('progress_teste_usuario');
        adicionarTeste('Dados salvos no cache local', dadosLocais !== null);

        // Teste 14: Reset de progresso
        console.log('\n14. Testando reset de progresso...');
        await pm.resetProgress();
        const statusAposReset = pm.getModuleStatus('1');
        adicionarTeste('Reset de progresso funcionando', statusAposReset === 'available');

    } catch (erro) {
        console.error('‚ùå Erro durante os testes:', erro);
        adicionarTeste('Execu√ß√£o geral dos testes', false, erro.message);
    }

    // Relat√≥rio final
    console.log('\n' + '='.repeat(50));
    console.log('üìä RELAT√ìRIO FINAL DOS TESTES');
    console.log('='.repeat(50));
    console.log(`‚úÖ Sucessos: ${resultados.sucessos}/${resultados.total}`);
    console.log(`‚ùå Falhas: ${resultados.erros.length}`);
    console.log(`üìà Taxa de sucesso: ${((resultados.sucessos / resultados.total) * 100).toFixed(1)}%`);

    if (resultados.erros.length > 0) {
        console.log('\n‚ùå ERROS ENCONTRADOS:');
        resultados.erros.forEach(erro => {
            console.log(`  - ${erro.nome}: ${erro.erro}`);
        });
    }

    // Salva relat√≥rio
    const relatorio = {
        timestamp: new Date().toISOString(),
        resultados,
        sistema: 'Progress Manager MRS'
    };

    fs.writeFileSync(
        path.join(__dirname, '../logs/teste-progresso.json'),
        JSON.stringify(relatorio, null, 2)
    );

    console.log('\nüìÑ Relat√≥rio salvo em: logs/teste-progresso.json');

    return resultados.sucessos === resultados.total;
}

// Executa os testes
testarSistemaProgresso().then(sucesso => {
    if (sucesso) {
        console.log('\nüéâ TODOS OS TESTES PASSARAM! Sistema de progresso funcionando corretamente.');
        process.exit(0);
    } else {
        console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique os erros acima.');
        process.exit(1);
    }
}).catch(erro => {
    console.error('\nüí• ERRO CR√çTICO:', erro);
    process.exit(1);
}); 