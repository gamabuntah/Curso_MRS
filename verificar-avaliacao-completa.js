#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

console.log('üîç VERIFICA√á√ÉO COMPLETA - ARQUIVO AVALIA√á√ÉO FINAL');
console.log('='.repeat(60));

const arquivoPath = 'public/data/browser/questoes-otimizadas/avaliacaoFinal.js';

try {
  // 1. VERIFICAR SE O ARQUIVO EXISTE
  console.log('üìÑ 1. VERIFICANDO EXIST√äNCIA DO ARQUIVO...');
  if (!fs.existsSync(arquivoPath)) {
    console.log('‚ùå Arquivo n√£o encontrado!');
    process.exit(1);
  }
  console.log('‚úÖ Arquivo encontrado');
  
  // 2. VERIFICAR TAMANHO DO ARQUIVO
  const stats = fs.statSync(arquivoPath);
  console.log(`üìä Tamanho: ${(stats.size / 1024).toFixed(2)} KB`);
  
  // 3. TESTAR SINTAXE JAVASCRIPT
  console.log('\nüß™ 2. TESTANDO SINTAXE JAVASCRIPT...');
  try {
    execSync(`node -c "${arquivoPath}"`, { stdio: 'pipe' });
    console.log('‚úÖ Sintaxe JavaScript v√°lida');
  } catch (error) {
    console.log('‚ùå ERRO DE SINTAXE:');
    console.log(error.stderr.toString());
    
    // Tentar identificar linha problem√°tica
    const errorMsg = error.stderr.toString();
    const linhaMatch = errorMsg.match(/js:(\d+)/);
    if (linhaMatch) {
      const linhaErro = parseInt(linhaMatch[1]);
      console.log(`\nüîç LINHA PROBLEM√ÅTICA: ${linhaErro}`);
      
      const conteudo = fs.readFileSync(arquivoPath, 'utf8');
      const linhas = conteudo.split('\n');
      
      // Mostrar contexto da linha problem√°tica
      const inicio = Math.max(0, linhaErro - 3);
      const fim = Math.min(linhas.length, linhaErro + 2);
      
      console.log('\nCONTEXTO:');
      for (let i = inicio; i < fim; i++) {
        const marca = i === linhaErro - 1 ? '>>> ' : '    ';
        console.log(`${marca}${i + 1}: ${linhas[i]}`);
      }
    }
    return;
  }
  
  // 4. TESTAR CARREGAMENTO DO ARQUIVO
  console.log('\nüì• 3. TESTANDO CARREGAMENTO...');
  try {
    global.window = {};
    delete require.cache[require.resolve('./' + arquivoPath)];
    require('./' + arquivoPath);
    console.log('‚úÖ Arquivo carregado com sucesso');
  } catch (error) {
    console.log('‚ùå ERRO NO CARREGAMENTO:');
    console.log(error.message);
    return;
  }
  
  // 5. VERIFICAR ESTRUTURA DE DADOS
  console.log('\nüìã 4. VERIFICANDO ESTRUTURA DE DADOS...');
  
  if (!global.window.avaliacaoFinal) {
    console.log('‚ùå Objeto avaliacaoFinal n√£o encontrado');
    return;
  }
  console.log('‚úÖ Objeto avaliacaoFinal encontrado');
  
  const avaliacao = global.window.avaliacaoFinal;
  
  // Verificar propriedades principais
  const propriedadesEsperadas = ['title', 'descricao', 'configuracoes', 'questoes'];
  propriedadesEsperadas.forEach(prop => {
    if (avaliacao[prop] !== undefined) {
      console.log(`‚úÖ ${prop}: OK`);
    } else {
      console.log(`‚ùå ${prop}: AUSENTE`);
    }
  });
  
  // 6. VERIFICAR QUEST√ïES
  console.log('\n‚ùì 5. VERIFICANDO QUEST√ïES...');
  
  if (!avaliacao.questoes || !Array.isArray(avaliacao.questoes)) {
    console.log('‚ùå Array de quest√µes n√£o encontrado');
    return;
  }
  
  const totalQuestoes = avaliacao.questoes.length;
  console.log(`üìä Total de quest√µes: ${totalQuestoes}`);
  
  if (totalQuestoes === 0) {
    console.log('‚ùå Nenhuma quest√£o encontrada');
    return;
  }
  
  // 7. VERIFICAR ESTRUTURA DAS QUEST√ïES
  console.log('\nüîç 6. VERIFICANDO ESTRUTURA DAS QUEST√ïES...');
  
  let questoesValidas = 0;
  let questoesComProblemas = 0;
  
  avaliacao.questoes.forEach((questao, index) => {
    const problemas = [];
    
    // Verificar propriedades obrigat√≥rias
    if (!questao.pergunta) problemas.push('pergunta ausente');
    if (!questao.alternativas || !Array.isArray(questao.alternativas)) problemas.push('alternativas ausentes/inv√°lidas');
    
    if (questao.alternativas && Array.isArray(questao.alternativas)) {
      if (questao.alternativas.length !== 4) problemas.push(`${questao.alternativas.length} alternativas (esperado: 4)`);
      
      // Verificar se tem uma alternativa correta
      const corretas = questao.alternativas.filter(alt => alt.correta === true);
      if (corretas.length !== 1) problemas.push(`${corretas.length} alternativas corretas (esperado: 1)`);
      
      // Verificar estrutura das alternativas
      questao.alternativas.forEach((alt, altIndex) => {
        if (!alt.texto) problemas.push(`alternativa ${altIndex + 1} sem texto`);
        if (alt.correta === undefined) problemas.push(`alternativa ${altIndex + 1} sem propriedade correta`);
        if (!alt.feedback) problemas.push(`alternativa ${altIndex + 1} sem feedback`);
      });
    }
    
    if (problemas.length === 0) {
      questoesValidas++;
    } else {
      questoesComProblemas++;
      if (questoesComProblemas <= 5) { // Mostrar apenas primeiros 5 problemas
        console.log(`‚ùå Quest√£o ${index + 1}: ${problemas.join(', ')}`);
      }
    }
  });
  
  console.log(`\nüìä RESUMO DAS QUEST√ïES:`);
  console.log(`‚úÖ Quest√µes v√°lidas: ${questoesValidas}`);
  console.log(`‚ùå Quest√µes com problemas: ${questoesComProblemas}`);
  
  // 8. VERIFICAR CONFIGURA√á√ïES
  console.log('\n‚öôÔ∏è 7. VERIFICANDO CONFIGURA√á√ïES...');
  
  if (avaliacao.configuracoes) {
    console.log(`‚úÖ Tempo limite: ${avaliacao.configuracoes.tempoLimite || 'N/A'} min`);
    console.log(`‚úÖ Nota m√≠nima: ${avaliacao.configuracoes.notaMinima || 'N/A'}%`);
    console.log(`‚úÖ Total quest√µes: ${avaliacao.configuracoes.totalQuestoes || 'N/A'}`);
    console.log(`‚úÖ Embaralhamento: ${avaliacao.configuracoes.embaralhamento ? 'Sim' : 'N√£o'}`);
  }
  
  // 9. RESULTADO FINAL
  console.log('\n' + '='.repeat(60));
  console.log('üéØ RESULTADO FINAL:');
  
  if (questoesComProblemas === 0) {
    console.log('üéâ ARQUIVO TOTALMENTE CORRETO!');
    console.log(`‚úÖ ${totalQuestoes} quest√µes v√°lidas`);
    console.log('‚úÖ Sintaxe JavaScript perfeita');
    console.log('‚úÖ Estrutura de dados completa');
    console.log('üöÄ PRONTO PARA USO NO SISTEMA!');
  } else {
    console.log('‚ö†Ô∏è ARQUIVO COM ALGUNS PROBLEMAS');
    console.log(`‚ùå ${questoesComProblemas} quest√µes precisam de corre√ß√£o`);
    console.log(`‚úÖ ${questoesValidas} quest√µes est√£o corretas`);
  }
  
} catch (error) {
  console.error('‚ùå ERRO GERAL:', error.message);
} 