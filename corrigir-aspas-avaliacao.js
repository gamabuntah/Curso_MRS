#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('🔧 CORRIGINDO ASPAS NO ARQUIVO DE AVALIAÇÃO FINAL...');

const arquivoPath = 'public/data/browser/questoes-otimizadas/avaliacaoFinal.js';

try {
  // Ler o arquivo
  let conteudo = fs.readFileSync(arquivoPath, 'utf8');
  
  console.log('📄 Arquivo lido com sucesso');
  
  // Fazer backup
  fs.writeFileSync(arquivoPath + '.backup', conteudo);
  console.log('💾 Backup criado');
  
  // Corrigir aspas duplas dentro de strings
  // Padrão: "texto que contém "aspas duplas" no meio"
  // Substituir por: "texto que contém \"aspas duplas\" no meio"
  
  let conteudoCorrigido = conteudo;
  
  // Regex para encontrar e escapar aspas duplas dentro de strings de feedback e texto
  // Procurar por "feedback": "texto com "aspas" no meio"
  conteudoCorrigido = conteudoCorrigido.replace(
    /"feedback":\sg,
    (match, ...grupos) => {
      // Escapar aspas duplas nos grupos capturados
      const textoEscapado = grupos.filter(g => g !== undefined).join('\\"');
      return `"feedback": "${textoEscapado}"`;
    }
  );
  
  // Método mais simples e eficaz: substituir todas as aspas duplas dentro de strings
  // de feedback e texto por aspas simples
  conteudoCorrigido = conteudoCorrigido.replace(
    /("feedback":\sg,
    (match, inicio, ...grupos) => {
      // Substituir aspas duplas por aspas simples nos grupos
      const textoCorrigido = grupos.filter(g => g !== undefined).join("'");
      return inicio + "'" + textoCorrigido + '"';
    }
  );
  
  // Método direto: substituir aspas duplas problemáticas por aspas simples
  // Procurar por strings que contêm aspas duplas e substituí-las
  conteudoCorrigido = conteudoCorrigido.replace(
g,
    (match, ...grupos) => {
      // Escapar aspas duplas
      const textoEscapado = grupos.filter(g => g !== undefined).join('\\"');
      return '"' + textoEscapado + '"';
    }
  );
  
  // Salvar o arquivo corrigido
  fs.writeFileSync(arquivoPath, conteudoCorrigido);
  
  console.log('✅ Arquivo corrigido com sucesso!');
  console.log('📁 Backup salvo em: ' + arquivoPath + '.backup');
  
} catch (error) {
  console.error('❌ Erro ao corrigir arquivo:', error.message);
  process.exit(1);
} 