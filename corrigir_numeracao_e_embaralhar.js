const fs = require('fs');

// Fun√ß√£o para embaralhar array usando Fisher-Yates
function embaralharArray(array) {
    const resultado = [...array];
    for (let i = resultado.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [resultado[i], resultado[j]] = [resultado[j], resultado[i]];
    }
    return resultado;
}

// Fun√ß√£o para extrair quest√µes do arquivo
function extrairQuestoes(conteudo) {
    const questoes = [];
    const linhas = conteudo.split('\n');
    let questaoAtual = null;
    let linhasQuestao = [];
    
    for (let i = 0; i < linhas.length; i++) {
        const linha = linhas[i];
        
        // Verificar se √© in√≠cio de nova quest√£o
        if (linha.match(/^## Quest√£o \d+/)) {
            // Salvar quest√£o anterior se existir
            if (questaoAtual && linhasQuestao.length > 0) {
                questoes.push({
                    numero: questaoAtual,
                    linhas: linhasQuestao
                });
            }
            
            // Extrair n√∫mero da quest√£o
            const match = linha.match(/^## Quest√£o (\d+)/);
            questaoAtual = parseInt(match[1]);
            linhasQuestao = [linha];
        } else if (linha.match(/^## üìä RESUMO FINAL/)) {
            // Parar quando chegar no resumo final
            if (questaoAtual && linhasQuestao.length > 0) {
                questoes.push({
                    numero: questaoAtual,
                    linhas: linhasQuestao
                });
            }
            break;
        } else if (questaoAtual) {
            linhasQuestao.push(linha);
        }
    }
    
    return questoes;
}

// Fun√ß√£o para corrigir numera√ß√£o (51‚Üí43, 52‚Üí44)
function corrigirNumeracao(questoes) {
    return questoes.map(questao => {
        let novoNumero = questao.numero;
        
        // Corrigir numera√ß√£o espec√≠fica
        if (questao.numero === 51) novoNumero = 43;
        if (questao.numero === 52) novoNumero = 44;
        
        // Atualizar as linhas da quest√£o
        const novasLinhas = questao.linhas.map(linha => {
            if (linha.match(/^## Quest√£o \d+/)) {
                return linha.replace(/^## Quest√£o \d+/, `## Quest√£o ${novoNumero}`);
            }
            return linha;
        });
        
        return {
            numero: novoNumero,
            linhas: novasLinhas
        };
    });
}

// Fun√ß√£o para renumerar quest√µes sequencialmente
function renumerarQuestoes(questoes) {
    // Ordenar por n√∫mero atual
    questoes.sort((a, b) => a.numero - b.numero);
    
    return questoes.map((questao, index) => {
        const novoNumero = index + 1;
        const novasLinhas = questao.linhas.map(linha => {
            // Substituir n√∫mero da quest√£o no t√≠tulo
            if (linha.match(/^## Quest√£o \d+/)) {
                return linha.replace(/^## Quest√£o \d+/, `## Quest√£o ${novoNumero}`);
            }
            return linha;
        });
        
        return {
            numeroOriginal: questao.numero,
            numero: novoNumero,
            linhas: novasLinhas
        };
    });
}

// Fun√ß√£o principal
function corrigirNumeracaoEEmbaralhar() {
    try {
        console.log('üîÑ Iniciando corre√ß√£o de numera√ß√£o e embaralhamento...');
        
        // Criar backup de seguran√ßa
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const arquivoBackup = `MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO_backup_${timestamp}.md`;
        
        // Ler o arquivo original
        const arquivo = 'MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md';
        const conteudo = fs.readFileSync(arquivo, 'utf8');
        
        // Criar backup
        fs.writeFileSync(arquivoBackup, conteudo, 'utf8');
        console.log(`üíæ Backup criado: ${arquivoBackup}`);
        
        // Separar cabe√ßalho, quest√µes e rodap√©
        const partes = conteudo.split('## Quest√£o 1');
        const cabecalho = partes[0];
        const restoConteudo = '## Quest√£o 1' + partes[1];
        
        // Extrair quest√µes
        const questoes = extrairQuestoes(restoConteudo);
        console.log(`üìä Encontradas ${questoes.length} quest√µes`);
        
        // Corrigir numera√ß√£o espec√≠fica (51‚Üí43, 52‚Üí44)
        const questoesCorrigidas = corrigirNumeracao(questoes);
        console.log('üîß Numera√ß√£o corrigida (51‚Üí43, 52‚Üí44)');
        
        // Embaralhar quest√µes
        const questoesEmbaralhadas = embaralharArray(questoesCorrigidas);
        console.log('üé≤ Quest√µes embaralhadas com sucesso');
        
        // Renumerar sequencialmente (1, 2, 3...)
        const questoesRenumeradas = renumerarQuestoes(questoesEmbaralhadas);
        console.log('üî¢ Quest√µes renumeradas sequencialmente');        
        // Reconstruir conte√∫do
        let novoConteudo = cabecalho;
        
        // Adicionar quest√µes renumeradas
        questoesRenumeradas.forEach(questao => {
            novoConteudo += questao.linhas.join('\n') + '\n\n';
        });
        
        // Adicionar resumo final atualizado
        const resumoFinal = `## üìä RESUMO FINAL

### **Total de Quest√µes Consolidadas:** ${questoesRenumeradas.length}
### **Status:** ‚úÖ **QUEST√ïES CORRIGIDAS, EMBARALHADAS E RENUMERADAS**

### **Corre√ß√µes Aplicadas:**
- Quest√£o 51 ‚Üí Quest√£o 43
- Quest√£o 52 ‚Üí Quest√£o 44
- Todas as quest√µes foram embaralhadas aleatoriamente
- Renumera√ß√£o sequencial de 1 a ${questoesRenumeradas.length}

### **Distribui√ß√£o por M√≥dulos (ap√≥s embaralhamento):**
- **Quest√µes 1-5:** Fundamentos do Saneamento B√°sico e a PNSB
- **M√≥dulo 1:** 2 quest√µes - Fundamentos do Saneamento B√°sico e a PNSB
- **M√≥dulo 2:** 7 quest√µes - Estrutura do Question√°rio da PNSB 2024
- **M√≥dulo 3:** 8 quest√µes - Limpeza Urbana e Manejo de Res√≠duos S√≥lidos
- **M√≥dulo 4:** 7 quest√µes - MRS em √Åreas Especiais e Coleta Seletiva
- **M√≥dulo 5:** 7 quest√µes - Manejo de Res√≠duos S√≥lidos Especiais (ESP)
- **M√≥dulo 6:** 6 quest√µes - Unidades de Destina√ß√£o/Disposi√ß√£o Final (DIS)
- **M√≥dulo 7:** 10 quest√µes - Entidades de Catadores, Ve√≠culos e Educa√ß√£o Ambiental

---
**Script executado em:** ${new Date().toLocaleString('pt-BR')}
**Arquivo processado:** MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md
**Backup criado:** ${arquivoBackup}
**Quest√µes processadas:** ${questoesRenumeradas.length}
**Status:** ‚úÖ **PROCESSAMENTO CONCLU√çDO COM SUCESSO!**
`;
        
        novoConteudo += resumoFinal;
        
        // Salvar arquivo
        fs.writeFileSync(arquivo, novoConteudo, 'utf8');
        
        console.log(`‚úÖ Arquivo atualizado: ${arquivo}`);
        console.log(`üìä Total de quest√µes processadas: ${questoesRenumeradas.length}`);
        console.log(`üé≤ Quest√µes corrigidas, embaralhadas e renumeradas com sucesso!`);
        
        // Mostrar mapeamento da nova ordem
        console.log('\nüìã MAPEAMENTO DA NOVA ORDEM:');
        console.log('Original ‚Üí Nova Posi√ß√£o');
        questoesRenumeradas.forEach((questao, index) => {
            console.log(`Quest√£o ${questao.numeroOriginal} ‚Üí Quest√£o ${index + 1}`);
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao processar quest√µes:', error.message);
    }
}

// Executar script
corrigirNumeracaoEEmbaralhar(); 