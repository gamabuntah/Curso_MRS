const fs = require('fs');

// Ler o arquivo consolidado
const conteudo = fs.readFileSync('MRS/Questoes_Av_Final_Padronizadas_COMPLETO.md', 'utf8');

// Quest√µes duplicadas identificadas (manter a primeira ocorr√™ncia de cada)
const duplicatas = [
    {
        titulo: 'Aterro Sanit√°rio ‚Äì Caracter√≠sticas Essenciais',
        manter: 33, // Manter quest√£o 33
        remover: 42  // Remover quest√£o 42
    },
    {
        titulo: 'Remunera√ß√£o das Entidades de Catadores',
        manter: 36, // Manter quest√£o 36
        remover: 45  // Remover quest√£o 45
    },
    {
        titulo: 'Objetivo do Mapeamento de Infraestrutura',
        manter: 37, // Manter quest√£o 37
        remover: 47  // Remover quest√£o 47
    },
    {
        titulo: 'Educa√ß√£o Ambiental ‚Äì Foco Espec√≠fico',
        manter: 38, // Manter quest√£o 38
        remover: 48  // Remover quest√£o 48
    },
    {
        titulo: 'Temas de Educa√ß√£o Ambiental ‚Äì Exclus√£o',
        manter: 39, // Manter quest√£o 39
        remover: 49  // Remover quest√£o 49
    },
    {
        titulo: 'Formas de A√ß√£o de Educa√ß√£o Ambiental',
        manter: 40, // Manter quest√£o 40
        remover: 50  // Remover quest√£o 50
    }
];

// Dividir o conte√∫do em linhas
const linhas = conteudo.split('\n');
let novoConteudo = [];
let dentroQuestao = false;
let questaoAtual = null;
let questaoCompleta = [];
let questoesRemovidas = [];

// Processar linha por linha
for (let i = 0; i < linhas.length; i++) {
    const linha = linhas[i];
    
    // Verificar se √© in√≠cio de uma quest√£o
    if (linha.match(/^## Quest√£o \d+$/)) {
        // Se estava processando uma quest√£o anterior, salv√°-la
        if (dentroQuestao && questaoAtual) {
            novoConteudo.push(...questaoCompleta);
            questaoCompleta = [];
        }
        
        // Extrair n√∫mero da quest√£o
        const match = linha.match(/## Quest√£o (\d+)/);
        if (match) {
            questaoAtual = parseInt(match[1]);
            dentroQuestao = true;
            questaoCompleta = [linha];
        }
    } else if (dentroQuestao) {
        questaoCompleta.push(linha);
        
        // Verificar se chegou ao final da quest√£o (pr√≥xima quest√£o ou fim do arquivo)
        if (i === linhas.length - 1 || linhas[i + 1].match(/^## Quest√£o \d+$/)) {
            // Verificar se esta quest√£o deve ser removida
            const deveRemover = duplicatas.find(d => d.remover === questaoAtual);
            
            if (deveRemover) {
                console.log(`‚ùå Removendo quest√£o ${questaoAtual}: ${deveRemover.titulo}`);
                questoesRemovidas.push(questaoAtual);
            } else {
                // Manter a quest√£o
                novoConteudo.push(...questaoCompleta);
            }
            
            dentroQuestao = false;
            questaoAtual = null;
            questaoCompleta = [];
        }
    } else {
        // Linhas fora de quest√µes (cabe√ßalho, rodap√©, etc.)
        novoConteudo.push(linha);
    }
}

// Renumerar as quest√µes sequencialmente
let novaQuestao = 1;
const conteudoFinal = novoConteudo.map(linha => {
    if (linha.match(/^## Quest√£o \d+$/)) {
        const novaLinha = `## Quest√£o ${novaQuestao}`;
        novaQuestao++;
        return novaLinha;
    }
    return linha;
});

// Atualizar o resumo final
let conteudoString = conteudoFinal.join('\n');

// Atualizar o total de quest√µes no resumo
conteudoString = conteudoString.replace(
    /### \*\*Total de Quest√µes Consolidadas:\*\* \d+/,
    `### **Total de Quest√µes Consolidadas:** ${novaQuestao - 1}`
);

// Atualizar a distribui√ß√£o por m√≥dulos no resumo
conteudoString = conteudoString.replace(
    /### \*\*Distribui√ß√£o por M√≥dulos:\*\*/,
    `### **Distribui√ß√£o por M√≥dulos (ap√≥s remo√ß√£o de duplicatas):**`
);

// Salvar o arquivo limpo
fs.writeFileSync('MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md', conteudoString, 'utf8');

console.log('\nüìä RESUMO DA LIMPEZA:');
console.log('=====================');
console.log(`‚úÖ Quest√µes removidas: ${questoesRemovidas.join(', ')}`);
console.log(`üìã Total de quest√µes √∫nicas: ${novaQuestao - 1}`);
console.log(`üìÑ Arquivo limpo salvo: MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md`);

// Verificar se h√° outras duplicatas
const titulos = [];
const duplicatasRestantes = [];

conteudoFinal.forEach(linha => {
    if (linha.includes(' - M√≥dulo ')) {
        const titulo = linha.split(' - M√≥dulo ')[0].trim();
        if (titulos.includes(titulo)) {
            duplicatasRestantes.push(titulo);
        } else {
            titulos.push(titulo);
        }
    }
});

if (duplicatasRestantes.length > 0) {
    console.log(`\n‚ö†Ô∏è  ATEN√á√ÉO: Ainda h√° duplicatas restantes:`);
    duplicatasRestantes.forEach(titulo => console.log(`   - ${titulo}`));
} else {
    console.log(`\n‚úÖ Nenhuma duplicata restante encontrada!`);
} 