// Script para contar quest√µes de cada m√≥dulo
const fs = require('fs');
const path = require('path');

function contarQuestoes(arquivo) {
    try {
        if (!fs.existsSync(arquivo)) {
            console.log(`Arquivo n√£o encontrado: ${arquivo}`);
            return 0;
        }
        const conteudo = fs.readFileSync(arquivo, 'utf8');
        const matches = conteudo.match(/answer:/g);
        return matches ? matches.length : 0;
    } catch (error) {
        console.error(`Erro ao ler ${arquivo}:`, error.message);
        return 0;
    }
}

const modulos = [
    'public/data/module1.js',
    'public/data/module2.js', 
    'public/data/module3.js',
    'public/data/module4.js',
    'public/data/module5.js',
    'public/data/module6.js',
    'public/data/module7.js',
    'public/data/module8.js'
];

console.log('=== CONTAGEM DE QUEST√ïES POR M√ìDULO ===\n');

let total = 0;
modulos.forEach((modulo, index) => {
    const count = contarQuestoes(modulo);
    total += count;
    console.log(`M√≥dulo ${index + 1}: ${count} quest√µes`);
});

console.log(`\nTotal: ${total} quest√µes`);

// Verificar avalia√ß√£o final
const avaliacaoFinal = contarQuestoes('public/data/avaliacaoFinal.js');
console.log(`Avalia√ß√£o Final: ${avaliacaoFinal} quest√µes`);

// Fun√ß√£o para contar quest√µes e verificar numera√ß√£o
function contarQuestoes() {
    try {
        console.log('üìä Analisando quest√µes no arquivo...');
        
        // Ler o arquivo
        const arquivo = 'MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md';
        const conteudo = fs.readFileSync(arquivo, 'utf8');
        const linhas = conteudo.split('\n');
        
        const questoesEncontradas = [];
        const numerosEncontrados = [];
        
        for (let i = 0; i < linhas.length; i++) {
            const linha = linhas[i].trim();
            
            // Verificar se √© in√≠cio de quest√£o
            if (linha.match(/^## Quest√£o \d+/)) {
                const match = linha.match(/^## Quest√£o (\d+)/);
                if (match) {
                    const numero = parseInt(match[1]);
                    questoesEncontradas.push({
                        numero: numero,
                        linha: i + 1,
                        titulo: linha
                    });
                    numerosEncontrados.push(numero);
                }
            }
        }
        
        // Ordenar por n√∫mero
        questoesEncontradas.sort((a, b) => a.numero - b.numero);
        numerosEncontrados.sort((a, b) => a - b);
        
        console.log(`\nüìà RESULTADO DA AN√ÅLISE:`);
        console.log(`Total de quest√µes encontradas: ${questoesEncontradas.length}`);
        console.log(`Menor n√∫mero: ${Math.min(...numerosEncontrados)}`);
        console.log(`Maior n√∫mero: ${Math.max(...numerosEncontrados)}`);
        
        // Verificar numera√ß√£o sequencial
        const numerosEsperados = [];
        for (let i = 1; i <= Math.max(...numerosEncontrados); i++) {
            numerosEsperados.push(i);
        }
        
        const numerosFaltando = numerosEsperados.filter(num => !numerosEncontrados.includes(num));
        const numerosExtras = numerosEncontrados.filter(num => num > questoesEncontradas.length);
        
        console.log(`\nüîç VERIFICA√á√ÉO DE NUMERA√á√ÉO:`);
        if (numerosFaltando.length > 0) {
            console.log(`‚ùå N√∫meros faltando: ${numerosFaltando.join(', ')}`);
        } else {
            console.log(`‚úÖ Nenhum n√∫mero faltando na sequ√™ncia`);
        }
        
        if (numerosExtras.length > 0) {
            console.log(`‚ö†Ô∏è N√∫meros extras/duplicados: ${numerosExtras.join(', ')}`);
        }
        
        console.log(`\nüìã LISTA DE QUEST√ïES ENCONTRADAS:`);
        questoesEncontradas.forEach(questao => {
            console.log(`Quest√£o ${questao.numero} (linha ${questao.linha})`);
        });
        
        // Verificar se h√° duplicatas
        const duplicatas = numerosEncontrados.filter((num, index) => numerosEncontrados.indexOf(num) !== index);
        if (duplicatas.length > 0) {
            console.log(`\n‚ö†Ô∏è DUPLICATAS ENCONTRADAS: ${[...new Set(duplicatas)].join(', ')}`);
        }
        
        return {
            total: questoesEncontradas.length,
            questoes: questoesEncontradas,
            numerosFaltando: numerosFaltando,
            duplicatas: [...new Set(duplicatas)]
        };
        
    } catch (error) {
        console.error('‚ùå Erro ao analisar quest√µes:', error.message);
        return null;
    }
}

// Executar an√°lise
const resultado = contarQuestoes();

if (resultado) {
    console.log(`\nüìä RESUMO FINAL:`);
    console.log(`Total de quest√µes: ${resultado.total}`);
    console.log(`N√∫meros faltando: ${resultado.numerosFaltando.length > 0 ? resultado.numerosFaltando.join(', ') : 'Nenhum'}`);
    console.log(`Duplicatas: ${resultado.duplicatas.length > 0 ? resultado.duplicatas.join(', ') : 'Nenhuma'}`);
} 