const fs = require('fs');

// Fun√ß√£o para embaralhar array usando Fisher-Yates
function embaralharArray(array) {
    const resultado = [...array];
    for (let i = resultado.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [resultado[i], resultado[j]] = [resultado[j], resultado[i]];
    }
    return resultado;
}

function embaralharQuestoes() {
    try {
        console.log('üîÑ Iniciando embaralhamento das quest√µes...');
        
        // Criar backup
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const arquivoBackup = `MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO_backup_${timestamp}.md`;
        const arquivo = 'MRS/Questoes_Av_Final_Padronizadas_COMPLETO_LIMPO.md';
        
        let conteudo = fs.readFileSync(arquivo, 'utf8');
        fs.writeFileSync(arquivoBackup, conteudo, 'utf8');
        console.log(`üíæ Backup criado: ${arquivoBackup}`);
        
        // PASSO 1: Corrigir numera√ß√£o (51‚Üí43, 52‚Üí44)
        console.log('üîß Corrigindo numera√ß√£o...');
        conteudo = conteudo.replace(/^## Quest√£o 51/gm, '## Quest√£o 43');
        conteudo = conteudo.replace(/^## Quest√£o 52/gm, '## Quest√£o 44');
        
        // PASSO 2: Extrair todas as quest√µes
        const questoes = [];
        const linhas = conteudo.split('\n');
        let questaoAtual = null;
        let linhasQuestao = [];
        
        for (let i = 0; i < linhas.length; i++) {
            const linha = linhas[i];
            
            if (linha.match(/^## Quest√£o \d+/)) {
                // Salvar quest√£o anterior
                if (questaoAtual && linhasQuestao.length > 0) {
                    questoes.push({
                        numero: questaoAtual,
                        conteudo: linhasQuestao.join('\n')
                    });
                }
                
                // Nova quest√£o
                const match = linha.match(/^## Quest√£o (\d+)/);
                questaoAtual = parseInt(match[1]);
                linhasQuestao = [linha];
            } else if (linha.match(/^## üìä RESUMO FINAL/)) {
                // Salvar √∫ltima quest√£o e parar
                if (questaoAtual && linhasQuestao.length > 0) {
                    questoes.push({
                        numero: questaoAtual,
                        conteudo: linhasQuestao.join('\n')
                    });
                }
                break;
            } else if (questaoAtual) {
                linhasQuestao.push(linha);
            }
        }
        
        console.log(`üìä Encontradas ${questoes.length} quest√µes`);
        
        // PASSO 3: Embaralhar quest√µes
        const questoesEmbaralhadas = embaralharArray(questoes);
        console.log('üé≤ Quest√µes embaralhadas');
        
        // PASSO 4: Renumerar sequencialmente
        const questoesRenumeradas = questoesEmbaralhadas.map((questao, index) => {
            const novoNumero = index + 1;
            const novoConteudo = questao.conteudo.replace(/^## Quest√£o \d+/, `## Quest√£o ${novoNumero}`);
            return {
                numeroOriginal: questao.numero,
                numero: novoNumero,
                conteudo: novoConteudo
            };
        });
        
        console.log('üî¢ Quest√µes renumeradas sequencialmente');
        
        // PASSO 5: Reconstruir arquivo
        const cabecalho = conteudo.substring(0, conteudo.indexOf('## Quest√£o 1'));
        
        let novoConteudo = cabecalho;
        questoesRenumeradas.forEach(questao => {
            novoConteudo += questao.conteudo + '\n\n';
        });
        
        // Adicionar resumo final
        const resumoFinal = `## üìä RESUMO FINAL

### **Total de Quest√µes Consolidadas:** ${questoesRenumeradas.length}
### **Status:** ‚úÖ **QUEST√ïES EMBARALHADAS E RENUMERADAS**

### **Processamento Realizado:**
- Corre√ß√£o: Quest√£o 51 ‚Üí Quest√£o 43, Quest√£o 52 ‚Üí Quest√£o 44
- Embaralhamento aleat√≥rio de todas as quest√µes
- Renumera√ß√£o sequencial de 1 a ${questoesRenumeradas.length}

### **Distribui√ß√£o por M√≥dulos (ap√≥s embaralhamento):**
- **M√≥dulos 1-7:** ${questoesRenumeradas.length} quest√µes distribu√≠das aleatoriamente
- **Fundamentos, Estrutura, Limpeza, MRS, Especiais, Destina√ß√£o, Entidades**

---
**Script executado em:** ${new Date().toLocaleString('pt-BR')}
**Arquivo processado:** ${arquivo}
**Backup criado:** ${arquivoBackup}
**Quest√µes processadas:** ${questoesRenumeradas.length}
**Status:** ‚úÖ **EMBARALHAMENTO CONCLU√çDO COM SUCESSO!**
`;
        
        novoConteudo += resumoFinal;
        
        // Salvar arquivo
        fs.writeFileSync(arquivo, novoConteudo, 'utf8');
        
        console.log(`‚úÖ Arquivo atualizado: ${arquivo}`);
        console.log(`üìä Total de quest√µes processadas: ${questoesRenumeradas.length}`);
        
        // Mostrar mapeamento
        console.log('\nüìã MAPEAMENTO DA NOVA ORDEM (primeiras 10):');
        questoesRenumeradas.slice(0, 10).forEach((questao, index) => {
            console.log(`Quest√£o ${questao.numeroOriginal} ‚Üí Quest√£o ${index + 1}`);
        });
        
        if (questoesRenumeradas.length > 10) {
            console.log(`... e mais ${questoesRenumeradas.length - 10} quest√µes`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao embaralhar quest√µes:', error.message);
    }
}

// Executar
embaralharQuestoes(); 